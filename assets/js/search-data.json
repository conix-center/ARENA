{"0": {
    "doc": "A-Frame",
    "title": "A-Frame",
    "content": ". | https://aframe.io/ | . Warning . The code examples below are currently out of date and are being updated… . ",
    "url": "https://arena.conix.io/content/developer/aframe.html",
    "relUrl": "/content/developer/aframe.html"
  },"1": {
    "doc": "A-Frame",
    "title": "Adding Arbitrary A-Frame to the ARENA",
    "content": "The data payload we send in MQTT messages is both a part of A-Frame and used especially by the ARENA. When the ARENA generates an A-Frame &lt;a-entity&gt; we parse known ARENA-specific parts of the payload first, then what remains goes into attributes. In ARENA-core mqtt.js ~line 984: . // what remains are attributes for special cases; iteratively set them const thing = Object.entries(theMessage.data); const len = thing.length; for (let i = 0; i &lt; len; i++) { const theattr = thing[i][0]; // attribute const thevalue = thing[i][1]; // value entityEl.setAttribute(theattr, thevalue); } . Example: . mosquitto_pub -h arenaxr.org -t realm/s/example/duck_1 -m '{ \"object_id\" : \"duck_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 10000 } } }' . Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/developer/aframe.html#adding-arbitrary-a-frame-to-the-arena",
    "relUrl": "/content/developer/aframe.html#adding-arbitrary-a-frame-to-the-arena"
  },"2": {
    "doc": "Animated Models",
    "title": "Animated Models",
    "content": "Warning . The code examples below are currently out of date and are being updated… . ",
    "url": "https://arena.conix.io/content/3d-content/animated-models.html",
    "relUrl": "/content/3d-content/animated-models.html"
  },"3": {
    "doc": "Animated Models",
    "title": "Animate (rotation)",
    "content": "Animate rotation of the already drawn cube. Raw Message . mosquitto_pub -h arenaxr.org -t realm/s/example/cube_1 -m '{\"object_id\" : \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 10000}} }' . Python . cube.update(data='{\"animation\": {\"property\":\"rotation\", \"to\":\"0 360 0\", \"loop\":\"true\", \"dur\":10000}}') . other animations are available that resemble the \"data\": {\"animation\": { \"property\": ... }} blob above: see A-Frame Animation documentation for more examples . ",
    "url": "https://arena.conix.io/content/3d-content/animated-models.html#animate-rotation",
    "relUrl": "/content/3d-content/animated-models.html#animate-rotation"
  },"4": {
    "doc": "Animations and Morphs",
    "title": "Animations and GLTF Morphs in ARENA-py",
    "content": "Dispatching and running animations and GLTF 3D Morphs. ",
    "url": "https://arena.conix.io/content/python/animations.html#animations-and-gltf-morphs-in-arena-py",
    "relUrl": "/content/python/animations.html#animations-and-gltf-morphs-in-arena-py"
  },"5": {
    "doc": "Animations and Morphs",
    "title": "Animations",
    "content": "Dispatching Animations . You can add animations to objects that will run when scene.run_animations(...) is called: . obj = Box() obj.dispatch_animation( Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ) ) scene.run_animations(obj) # this will cause the animation to be run . You can also dispatch multiple Animations: . obj = Box() obj.dispatch_animation( [ Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ), Animation( property=\"position\", start=(0,0,-5), end=(0,0,-10), easing=\"linear\", dur=1000 ) ] ) scene.run_animations(obj) # this will cause all the dispatched animations to be run . Animation vs AnimationMixer . AnimationMixers are special animations specific to a 3D model. These can be run the same way as regular Animations. See here. xr_logo.dispatch_animation( AnimationMixer(clip=\"*\", loop=\"repeat\") ) scene.run_animations(xr_logo) # this will cause the 3D model to play its animations . Permanent Animations . Sometimes you want Animations to be associated with the object. You can do this by adding the Animation as an Attribute to the Object: . # this makes it such that xr_logo will ALWAYS play the animation when someone joins # your ARENA scene, since the animation is now associated with that object: xr_logo.update_attributes( animation_mixer=AnimationMixer( clip=\"*\", loop=\"repeat\" ) ) . ",
    "url": "https://arena.conix.io/content/python/animations.html#animations",
    "relUrl": "/content/python/animations.html#animations"
  },"6": {
    "doc": "Animations and Morphs",
    "title": "GLTF Morphs",
    "content": "Morph and update_morph . GLTF morphs can be created with the Morph class, and can be added to an object with the update_morph method: . # create list of Morphs open_eye_morph = [Morph(morphtarget=\"eyeTop\",value=0.0), Morph(morphtarget=\"eyeBottom\",value=0.0)] xr_logo.update_morph(open_eye_morph) # accepts Morphs and lists of Morph . ",
    "url": "https://arena.conix.io/content/python/animations.html#gltf-morphs",
    "relUrl": "/content/python/animations.html#gltf-morphs"
  },"7": {
    "doc": "Animations and Morphs",
    "title": "Animations and Morphs",
    "content": " ",
    "url": "https://arena.conix.io/content/python/animations.html",
    "relUrl": "/content/python/animations.html"
  },"8": {
    "doc": "ARENA A-Frame Components",
    "title": "ARENA Specific A-Frame Components",
    "content": "These are the A-Frame components and systems added to support ARENA core functionality. ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#arena-specific-a-frame-components",
    "relUrl": "/content/messaging/arena-aframe-components.html#arena-specific-a-frame-components"
  },"9": {
    "doc": "ARENA A-Frame Components",
    "title": "Components/Systems",
    "content": "arena-camera Tracking camera movement in real time. Emits camera pose change and VIO change events. arena-user Another user&#39;s camera in the ARENA. Handles Jitsi and display name updates. arena-vive Tracking Vive controller movement in real time. armarker-system ARMarker System. Supports ARMarkers in a scene. armarker ARMarker Component. Supports ARMarkers in a scene . attribution-system Attribution Component/System. Add attribution message to any entity. Tries to extract author, license, source and title (assuming format used in sketchfab downloaded models) . Looks for authorship metadata in both asset.extras (sketchfab models) and scene.extra (manually added attributes in blender). If both asset.extras and scene.extra exist, gives preference to asset.extras. attribution Attribution Component. Saves attribution data in any entity. The following properties can be saved. If extractAssetExtras=true (default), the attribution system attempts to extract data automatically from the model (requires models with authorship metadata; e.g. models downloaded from sketchfab have these data) . click-listener Keep track of mouse events and publish corresponding events . collision-listener Listen for collisions, callback on event. Requires Physics for A-Frame VR . gesture-detector Detect multi-finger touch gestures. Publish events accordingly. Based off 8th Wall&#39;s gesture-detector . gltf-model-progress GLTF model loading progress system. Manage GLTF load messages. goto-url Load new URL when object is clicked . hide-in-ar-mode Hide in AR component. When set to an entity, it will make the entity disappear when entering AR mode. Based on this example . impulse One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. Requires Physics for A-Frame VR . jitsi-video Apply a jitsi video to a geometry Jitsi video source can be defined using a jitsiId or (ARENA/Jitsi) display name . landmark Component-System of teleport destination Landmarks . load-scene Load scene from persistence. material-extras Allows to set extra material properties, namely texture encoding, whether to render the material&#39;s color and render order. The properties set here access directly Three.js material. Implements a timeout scheme in lack of better understanding of the timing/events causing properties to not be available. network-latency Publish with qos of 2 for network graph to update latency . press-and-move Press and move camera; User camera movement with the mouse. Based off wasd controls . screenshareable Screenshare-able Component. Allows an object to be screenshared upon . textinput Opens an HTML prompt when clicked. Sends text input as an event on MQTT . threejs-scene Load a THREE.js scene. THREE.js scene format is an almost direct serialization of the THREE.js objects, and can be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA For a move portable format, using glTF is preferred. ttl Time To Live (TTL) component. When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. video-control Adds a video to an entity and controls its playback. ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#componentssystems",
    "relUrl": "/content/messaging/arena-aframe-components.html#componentssystems"
  },"10": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-camera",
    "content": "Tracking camera movement in real time. Emits camera pose change and VIO change events. Properties . | Name | Type | Default | Description | . | enabled | boolean |   | Indicates whether camera tracking is enabled. | . | vioEnabled | boolean |   | Indicates whether to publish VIO on every tick (if true). | . | displayName | string |   | User display name (used to publish camera data). | . | color | string |   | Head text color. | . | [headModel] | string | &quot;&#x27;robobit&#x27;&quot; | Builtin head model (one of: ‘robobit’, ‘grey-head’) | . | [videoShape] | string | &quot;&#x27;default-box&#x27;&quot; | Builtin video shape (one of: ‘default-box’, ‘flat-box’) | . | rotation | Array.&lt;number&gt; |   | Last camera rotation value. | . | position | Array.&lt;number&gt; |   | Last camera position value. | . | vioRotation | Array.&lt;number&gt; |   | Last VIO rotation value. | . | vioPosition | Array.&lt;number&gt; |   | Last VIO position value. | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#arena-camera",
    "relUrl": "/content/messaging/arena-aframe-components.html#arena-camera"
  },"11": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-user",
    "content": "Another user’s camera in the ARENA. Handles Jitsi and display name updates. Properties . | Name | Type | Default | Description | . | [color] | color | white | The color for the user’s name text. | . | [headModel] | string | &quot;&#x27;robobit&#x27;&quot; | Builtin head model (one of: ‘robobit’, ‘grey-head’) | . | [videoShape] | string | &quot;&#x27;default-box&#x27;&quot; | Builtin video shape (one of: ‘default-box’, ‘flat-box’) | . | [jitsiId] | string |   | User jitsi id. | . | [displayName] | string |   | User display name. | . | [hasAudio] | boolean | false | Whether the user has audio on. | . | [hasVideo] | boolean | false | Whether the user has video on. | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#arena-user",
    "relUrl": "/content/messaging/arena-aframe-components.html#arena-user"
  },"12": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-vive",
    "content": "Tracking Vive controller movement in real time. Properties . | Name | Type | Description | . | enabled | boolean | Controller enabled. | . | name | string | Name used to publish controller pose. | . | hand | string | Controller hand. | . | color | string | Controller color. | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#arena-vive",
    "relUrl": "/content/messaging/arena-aframe-components.html#arena-vive"
  },"13": {
    "doc": "ARENA A-Frame Components",
    "title": "armarker-system",
    "content": "ARMarker System. Supports ARMarkers in a scene. | armarker-system . | registerComponent(marker) ⏏ | unregisterComponent(marker) ⏏ | getAll(mtype) ⇒ object ⏏ | get(markerid) ⇒ object ⏏ | . | . registerComponent(marker) ⏏ . Register an ARMarker component with the system . Kind: Exported function . | Param | Type | Description | . | marker | object | The marker component object to register. | . unregisterComponent(marker) ⏏ . Unregister an ARMarker component . Kind: Exported function . | Param | Type | Description | . | marker | object | The marker component object to unregister. | . getAll(mtype) ⇒ object ⏏ . Get all markers registered with the system . Kind: Exported function Returns: object - - a dictionary of markers . | Param | Type | Description | . | mtype | object | The marker type ‘apriltag_36h11’, ‘lightanchor’, ‘uwb’ to filter for; No argument or undefined will return all | . Example (Query the system a list of all markers in a scene) . let markers = document.querySelector(\"a-scene\").systems[\"armarker\"].getAll(); Object.keys(markers).forEach(function(key) { console.log(`tag id: ${markers[key].data.markerid}`, markers[key].el.object3D.matrixWorld); //matrixWorld: https://threejs.org/docs/#api/en/math/Matrix4 }); . Example (getAll() also accepts a marker type argument to filter by a given type) . let markers = document.querySelector(\"a-scene\").systems[\"armarker\"].getAll('apriltag_36h11'); . get(markerid) ⇒ object ⏏ . Get a marker given is markerid . Kind: Exported function Returns: object - - the marker with the markerid given . | Param | Type | Description | . | markerid | object | The marker id to return | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#armarker-system",
    "relUrl": "/content/messaging/arena-aframe-components.html#armarker-system"
  },"14": {
    "doc": "ARENA A-Frame Components",
    "title": "armarker",
    "content": "ARMarker Component. Supports ARMarkers in a scene . Properties . | Name | Type | Default | Description | . | [markertype] | string | &quot;apriltag_36h11&quot; | The marker type. One of ‘apriltag_36h11’, ‘lightanchor’, ‘uwb’ | . | [markerid] | string |   | Marker id. Typically an integer (e.g. for AprilTag 36h11 family, an integer in the range [0, 586]) | . | [size] | number | 150 | Size of the marker (assumed to be a square), if applicable (mm). | . | [url] | string |   | A URL associated with the marker. | . | [lat] | number | 0 | Marker latitude. | . | [long] | number | 0 | Marker longitude. | . | [ele] | number | 0 | Marker elevation. | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#armarker",
    "relUrl": "/content/messaging/arena-aframe-components.html#armarker"
  },"15": {
    "doc": "ARENA A-Frame Components",
    "title": "attribution-system",
    "content": "Attribution Component/System. Add attribution message to any entity. Tries to extract author, license, source and title (assuming format used in sketchfab downloaded models) . Looks for authorship metadata in both asset.extras (sketchfab models) and scene.extra (manually added attributes in blender). If both asset.extras and scene.extra exist, gives preference to asset.extras. Example (Sketchfab downloaded model attributes - asset.extra) . author: \"AuthorName (url-link-to-author)\" license: \"CC-BY-4.0 (url-link-to-license)\" source: \"url-link-to-model-website\" title: \"Model Title\" . | attribution-system . | registerComponent(el) ⏏ | unregisterComponent(el) ⏏ | getAttributionTable() ⇒ string ⏏ | extractAttributionFromGtlfAsset(el, gltfComponent) ⏏ | parseExtrasAttributes(extras) ⇒ object ⏏ | parseAttribute(extras, attribution, attribute) ⇒ boolean ⏏ | . | . registerComponent(el) ⏏ . Register an attribution component with the system . Kind: Exported function . | Param | Type | Description | . | el | object | The attribution a-frame element to register. | . unregisterComponent(el) ⏏ . Unregister an attribution component . Kind: Exported function . | Param | Type | Description | . | el | object | The attribution a-frame element. | . getAttributionTable() ⇒ string ⏏ . Collect all attribution components and return an HTML table with credits . Kind: Exported function Returns: string - - an HTML table with the scene credits Example (Query the system for an HTML table of credits:) . document.querySelector(\"a-scene\").systems[\"attribution\"].getAttributionTable(); . extractAttributionFromGtlfAsset(el, gltfComponent) ⏏ . Extract author, license, source and title assuming sketchfab format: author: “AuthorName (url-link-to-author)” license: “CC-BY-4.0 (url-link-to-license)” source: “url-link-to-model-website” title: “Model Title” . It will try to get exttributes from gltf’s asset.extras (sketchfab) and scene.userData (blender) If both are found, data will be merged with preference to properties in asset.extras . Kind: Exported function . | Param | Type | Description | . | el | object | the aframe element to set the attribution | . | gltfComponent | object | the GLTF model to extract properties from | . parseExtrasAttributes(extras) ⇒ object ⏏ . Parse author, license, source and title attributes. Kind: Exported function Returns: object - - a dictionary with the author, license, source and title parsed . | Param | Type | Description | . | extras | object | the source for the attribute data (asset.extras or scene.userData) | . parseAttribute(extras, attribution, attribute) ⇒ boolean ⏏ . Parse attribute given as parameter. Tries to find the attribute and add it to ‘attribution’ dictionary . Kind: Exported function Returns: boolean - - true/false if it could find the attribute . | Param | Type | Description | . | extras | object | the source for the attribute data | . | attribution | object | the destination attribute dictionary | . | attribute | object | which attribute to parse | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#attribution-system",
    "relUrl": "/content/messaging/arena-aframe-components.html#attribution-system"
  },"16": {
    "doc": "ARENA A-Frame Components",
    "title": "attribution",
    "content": "Attribution Component. Saves attribution data in any entity. The following properties can be saved. If extractAssetExtras=true (default), the attribution system attempts to extract data automatically from the model (requires models with authorship metadata; e.g. models downloaded from sketchfab have these data) . Properties . | Name | Type | Default | Description | . | [author] | string | &quot;Unknown&quot; | Author name; e.g. “Vaptor-Studio” | . | [authorURL] | string |   | Author homepage/profile; e.g. https://sketchfab.com/VapTor | . | [license] | string | &quot;Unknown&quot; | License summary/short name; e.g. “CC-BY-4.0”. | . | [licenseURL] | string |   | License URL; e.g. http://creativecommons.org/licenses/by/4.0/ | . | [source] | string | &quot;Unknown&quot; | Model source e.g. “Sketchfab”. | . | [sourceURL] | string |   | Model source URL; e.g. https://sketchfab.com/models/2135501583704537907645bf723685e7 | . | [title] | string | &quot;No Title&quot; | Model title; e.g. “Spinosaurus”. | . | id | string |   | The entity id in the scene; automatically filled in on component init | . | [extractAssetExtras] | boolean | true | Extract attribution info from asset extras; will override attribution info given (default: true) | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#attribution",
    "relUrl": "/content/messaging/arena-aframe-components.html#attribution"
  },"17": {
    "doc": "ARENA A-Frame Components",
    "title": "click-listener",
    "content": "Keep track of mouse events and publish corresponding events . init() ⏏ . Setup event listeners for mouse events; listeners publish events to MQTT . Kind: Exported function Todo . | Consolidate event listeners (they are very similar) | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#click-listener",
    "relUrl": "/content/messaging/arena-aframe-components.html#click-listener"
  },"18": {
    "doc": "ARENA A-Frame Components",
    "title": "collision-listener",
    "content": "Listen for collisions, callback on event. Requires Physics for A-Frame VR . Requires: module:aframe-physics-system . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#collision-listener",
    "relUrl": "/content/messaging/arena-aframe-components.html#collision-listener"
  },"19": {
    "doc": "ARENA A-Frame Components",
    "title": "gesture-detector",
    "content": "Detect multi-finger touch gestures. Publish events accordingly. Based off 8th Wall’s gesture-detector . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#gesture-detector",
    "relUrl": "/content/messaging/arena-aframe-components.html#gesture-detector"
  },"20": {
    "doc": "ARENA A-Frame Components",
    "title": "gltf-model-progress",
    "content": "GLTF model loading progress system. Manage GLTF load messages. | gltf-model-progress . | init() ⏏ | registerGltf(el) ⏏ | unregisterGltfBySrc(el) ⏏ | updateProgress(failed, evt) ⏏ | . | . init() ⏏ . Init system . Kind: Exported function . registerGltf(el) ⏏ . Register a gltf-model to deal with load events . Kind: Exported function . | Param | Type | Description | . | el | object | The a-frame element to register. | . unregisterGltfBySrc(el) ⏏ . Unregister a gltf-model . Kind: Exported function . | Param | Type | Description | . | el | object | The a-frame element. | . updateProgress(failed, evt) ⏏ . Updates GLTF Progress . Kind: Exported function . | Param | Type | Description | . | failed | boolean | whether or not download was successful | . | evt | object | gltf event | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#gltf-model-progress",
    "relUrl": "/content/messaging/arena-aframe-components.html#gltf-model-progress"
  },"21": {
    "doc": "ARENA A-Frame Components",
    "title": "goto-url",
    "content": "Load new URL when object is clicked . Properties . | Name | Type | Default | Description | . | on | string |   | A case-sensitive string representing the event type to listen for, e.g. ‘mousedown’, ‘mouseup’ | . | url | string |   | The destination url e.g. https://some-site.com | . | [dest] | string | &quot;sametab&quot; | Where to open the URL; one of ‘popup’, ‘newtab’, ‘sametab’ | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#goto-url",
    "relUrl": "/content/messaging/arena-aframe-components.html#goto-url"
  },"22": {
    "doc": "ARENA A-Frame Components",
    "title": "hide-in-ar-mode",
    "content": "Hide in AR component. When set to an entity, it will make the entity disappear when entering AR mode. Based on this example . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#hide-in-ar-mode",
    "relUrl": "/content/messaging/arena-aframe-components.html#hide-in-ar-mode"
  },"23": {
    "doc": "ARENA A-Frame Components",
    "title": "impulse",
    "content": "One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. Requires Physics for A-Frame VR . Requires: module:aframe-physics-system . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#impulse",
    "relUrl": "/content/messaging/arena-aframe-components.html#impulse"
  },"24": {
    "doc": "ARENA A-Frame Components",
    "title": "jitsi-video",
    "content": "Apply a jitsi video to a geometry Jitsi video source can be defined using a jitsiId or (ARENA/Jitsi) display name . Properties . | Name | Type | Description | . | [jitsiId] | string | JitsiId of the video source; If defined will override displayName | . | [displayName] | string | ARENA or Jitsi display name of the video source; Will be ignored if jitsiId is given. IMPORTANT: editing this property requires reload | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#jitsi-video",
    "relUrl": "/content/messaging/arena-aframe-components.html#jitsi-video"
  },"25": {
    "doc": "ARENA A-Frame Components",
    "title": "landmark",
    "content": "Component-System of teleport destination Landmarks . Properties . | Name | Type | Default | Description | . | [randomRadiusMin] | number | 0 | Min for a random range to teleport to. Max must &gt; 0 | . | [randomRadiusMax] | number | 0 | Max for a random range to teleport to. | . | [offsetPosition] | THREE.Vector3 | {0,1.6,0} | vector3 {x,y,z} to use as static teleport offset | . | [constrainToNavMesh] | string | &quot;&#x27;false&#x27;&quot; | Teleports here should snap to navmesh. [‘false’, ‘any’, ‘coplanar’] | . | [startingPosition] | boolean | false | True: use as a random scene load-in position | . | [lookAtLandmark] | boolean | true | True: After teleporting, user should rotate @ landmark | . | label | string | &quot;&#x27;&#x27;&quot; | Display label for Landmarks UI menu | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#landmark",
    "relUrl": "/content/messaging/arena-aframe-components.html#landmark"
  },"26": {
    "doc": "ARENA A-Frame Components",
    "title": "load-scene",
    "content": "Load scene from persistence. Todo . | this component is currently not used and probably needs to be updated | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#load-scene",
    "relUrl": "/content/messaging/arena-aframe-components.html#load-scene"
  },"27": {
    "doc": "ARENA A-Frame Components",
    "title": "material-extras",
    "content": "Allows to set extra material properties, namely texture encoding, whether to render the material’s color and render order. The properties set here access directly Three.js material. Implements a timeout scheme in lack of better understanding of the timing/events causing properties to not be available. Properties . | Name | Type | Default | Description | . | [encoding] | string | &quot;sRGBEncoding&quot; | The material encoding; One of ‘LinearEncoding’, ‘sRGBEncoding’, ‘GammaEncoding’, ‘RGBEEncoding’, ‘LogLuvEncoding’, ‘RGBM7Encoding’, ‘RGBM16Encoding’, ‘RGBDEncoding’, ‘BasicDepthPacking’, ‘RGBADepthPacking’. See Three.js material. | . | [needsUpdate] | boolean | false | Specifies that the material needs to be recompiled. See Three.js material. | . | [colorWrite] | boolean | true | Whether to render the material’s color. See Three.js material. | . | [renderOrder] | number | 1 | This value allows the default rendering order of scene graph objects to be overridden. See Three.js Object3D.renderOrder. | . | [transparentOccluder] | boolean | false | If true, will set colorWrite=false and renderOrder=0 to make the material a transparent occluder. | . | [defaultRenderOrder] | number | 1 | Used as the renderOrder when transparentOccluder is reset to false. | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#material-extras",
    "relUrl": "/content/messaging/arena-aframe-components.html#material-extras"
  },"28": {
    "doc": "ARENA A-Frame Components",
    "title": "network-latency",
    "content": "Publish with qos of 2 for network graph to update latency . Properties . | Name | Type | Default | Description | . | UPDATE_INTERVAL_MS | number | 10000 | Interval to send the periodic pings (ms) | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#network-latency",
    "relUrl": "/content/messaging/arena-aframe-components.html#network-latency"
  },"29": {
    "doc": "ARENA A-Frame Components",
    "title": "press-and-move",
    "content": "Press and move camera; User camera movement with the mouse. Based off wasd controls . Properties . | Name | Type | Default | Description | . | [acceleration] | number | 30 | Movement acceleration. | . | [enabled] | boolean | true | Is the camera movement component enabled. | . | [fly] | boolean | true | Is the camera at a fixed height (fly=false) or not (fly=true) | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#press-and-move",
    "relUrl": "/content/messaging/arena-aframe-components.html#press-and-move"
  },"30": {
    "doc": "ARENA A-Frame Components",
    "title": "screenshareable",
    "content": "Screenshare-able Component. Allows an object to be screenshared upon . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#screenshareable",
    "relUrl": "/content/messaging/arena-aframe-components.html#screenshareable"
  },"31": {
    "doc": "ARENA A-Frame Components",
    "title": "textinput",
    "content": "Opens an HTML prompt when clicked. Sends text input as an event on MQTT . Properties . | Name | Type | Default | Description | . | [on] | string | &quot;mousedown&quot; | A case-sensitive string representing the event type to listen for, e.g. ‘mousedown’, ‘mouseup’ | . | [title] | string | &quot;Text Input&quot; | The prompt title | . | [label] | string | &quot;Input text below (max is 140 characters)&quot; | Text prompt label | . | [placeholder] | string | &quot;Type here&quot; | Text input place hoText | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#textinput",
    "relUrl": "/content/messaging/arena-aframe-components.html#textinput"
  },"32": {
    "doc": "ARENA A-Frame Components",
    "title": "threejs-scene",
    "content": "Load a THREE.js scene. THREE.js scene format is an almost direct serialization of the THREE.js objects, and can be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA For a move portable format, using glTF is preferred. Properties . | Name | Type | Description | . | url | string | the three.js scene to load | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#threejs-scene",
    "relUrl": "/content/messaging/arena-aframe-components.html#threejs-scene"
  },"33": {
    "doc": "ARENA A-Frame Components",
    "title": "ttl",
    "content": "Time To Live (TTL) component. When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. Properties . | Name | Type | Description | . | seconds | number | Seconds until entity is removed | . | expireAt | object | Expiration time Date object | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#ttl",
    "relUrl": "/content/messaging/arena-aframe-components.html#ttl"
  },"34": {
    "doc": "ARENA A-Frame Components",
    "title": "video-control",
    "content": "Adds a video to an entity and controls its playback. Properties . | Name | Type | Default | Description | . | video_object | string |   | the object id of the element where to display the video | . | video_path | string |   | path/url to the video | . | [frame_object] | string |   | path/url to the keyframe to display | . | [anyone_clicks] | boolean | true | anyone clicks | . | [video_loop] | boolean | true | video loop | . | [autoplay] | boolean | false | video autoplays on load | . | [volume] | number | 1 | video sound volume | . ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html#video-control",
    "relUrl": "/content/messaging/arena-aframe-components.html#video-control"
  },"35": {
    "doc": "ARENA A-Frame Components",
    "title": "ARENA A-Frame Components",
    "content": " ",
    "url": "https://arena.conix.io/content/messaging/arena-aframe-components.html",
    "relUrl": "/content/messaging/arena-aframe-components.html"
  },"36": {
    "doc": "ATLAS",
    "title": "ATLAS (Authority on The Locations of ARENA Stuff)",
    "content": ". | ATLAS repository | . ATLAS will be like an aggregation of maps of major roadways. We intend that by using ATLAS, one can find any ARENA, though the details of scenes and processes we believe will be handled by other systems. The most typical usage of ATLAS would be to find an ARENA near one’s own geo-location. ATLAS is a Sails web app. See README.md in atlas-web-app/ for some more info and links about Sails. Populate test data . Currently, we are still populating my own test data each time. Please see Record.js for the structure of an ATLAS record. Sails auto-gens a RESTful API from that Record.js file. The default routes work fine for us right now, but could use more syntactic suggestions. | Sails blueprint-routes | . For us, with this web app started in dev mode, adding a record via default routes looks like this in a browser navbar: . localhost:1337/record/create?uuid=deadbeef . See test data . Similarly, to see what we just created, we would put the following in the navbar: . http://localhost:1337/record/ . ",
    "url": "https://arena.conix.io/content/tools/atlas.html#atlas-authority-on-the-locations-of-arena-stuff",
    "relUrl": "/content/tools/atlas.html#atlas-authority-on-the-locations-of-arena-stuff"
  },"37": {
    "doc": "ATLAS",
    "title": "The ATLAS-DNS Analogy",
    "content": "ATLAS is to ARENA as DNS is to the Internet . Well-captured points of this analogy: . | Both ATLAS and DNS are authorities on critical attributes of networked devices | Both ATLAS and DNS require manual entry for some subset of ground truth | Both ATLAS and DNS (well, future versions of ATLAS) are hierarchical, and can be traversed simply via recursion | . Uncaptured points with the ATLAS-DNS analogy: . | DNS adds 1 layer of abstraction for usability (textual domain name mapped to IP address) | However, ATLAS is probably going to do much more than a simple 1-to-1 mapping (talk of generating ID’s, even just performing geospatial calculations to find MQTT servers within n miles is astronomically more compute than DNS) | . ",
    "url": "https://arena.conix.io/content/tools/atlas.html#the-atlas-dns-analogy",
    "relUrl": "/content/tools/atlas.html#the-atlas-dns-analogy"
  },"38": {
    "doc": "ATLAS",
    "title": "Design Decisions",
    "content": "These conclusions we have reached by collaboration and consensus, but are not quite “written in stone” yet. | ATLAS server will implement a RESTful API (viz. pass documents, not rely on saved server or client state, etc.) | Server will be written in Node.js . | We like learning new languages | Node.js comes with very handy modules for web server sorts of things | . | . ",
    "url": "https://arena.conix.io/content/tools/atlas.html#design-decisions",
    "relUrl": "/content/tools/atlas.html#design-decisions"
  },"39": {
    "doc": "ATLAS",
    "title": "ATLAS",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/atlas.html",
    "relUrl": "/content/tools/atlas.html"
  },"40": {
    "doc": "Attributes",
    "title": "Attributes in ARENA-py",
    "content": "Attributes are used to specify parameters for ARENA Objects. See messaging. ",
    "url": "https://arena.conix.io/content/python/attributes.html#attributes-in-arena-py",
    "relUrl": "/content/python/attributes.html#attributes-in-arena-py"
  },"41": {
    "doc": "Attributes",
    "title": "Accessing Object Attributes",
    "content": "See Appendix for all types of Attributes. Usually, attributes (except for object_id, persist, ttl, and parent) are under the data field: . obj.object_id obj.persist ... obj.data.position obj.data.rotation ... obj.data.material # etc etc . ",
    "url": "https://arena.conix.io/content/python/attributes.html#accessing-object-attributes",
    "relUrl": "/content/python/attributes.html#accessing-object-attributes"
  },"42": {
    "doc": "Attributes",
    "title": "All Attributes",
    "content": " ",
    "url": "https://arena.conix.io/content/python/attributes.html#all-attributes",
    "relUrl": "/content/python/attributes.html#all-attributes"
  },"43": {
    "doc": "Attributes",
    "title": "Position",
    "content": "The position of an object can be specified by: . position=Position(x, y, z) # or position=(x, y, z) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#position",
    "relUrl": "/content/python/attributes.html#position"
  },"44": {
    "doc": "Attributes",
    "title": "Rotation",
    "content": "The rotation (in euler coordinates) of an object can be specified by: . rotation=Rotation(x, y, z) # or rotation=(x, y, z) . The rotation (in quaternions) of an object can be specified by: . rotation=Rotation(x, y, z, w) # note the additional \"w\" field # or rotation=(x, y, z, w) . Warning . All units for euler rotation are in degrees and quaternion rotation are in radians! . ",
    "url": "https://arena.conix.io/content/python/attributes.html#rotation",
    "relUrl": "/content/python/attributes.html#rotation"
  },"45": {
    "doc": "Attributes",
    "title": "Scale",
    "content": "The scale of an object can be specified by: . scale=Scale(x, y, z) # or scale=(x, y, z) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#scale",
    "relUrl": "/content/python/attributes.html#scale"
  },"46": {
    "doc": "Attributes",
    "title": "Color",
    "content": "The color of an object can be specified by: . color=Color(red, green, blue) # or color=(red, green, blue) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#color",
    "relUrl": "/content/python/attributes.html#color"
  },"47": {
    "doc": "Attributes",
    "title": "Material",
    "content": "The material (transparency and color) of an object can be set by: . material=Material(color, transparent, opacity, ...) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#material",
    "relUrl": "/content/python/attributes.html#material"
  },"48": {
    "doc": "Attributes",
    "title": "Animation",
    "content": "An animation and/or an animation-mixer can be added to an object: . See Animations and Morphs. ",
    "url": "https://arena.conix.io/content/python/attributes.html#animation",
    "relUrl": "/content/python/attributes.html#animation"
  },"49": {
    "doc": "Attributes",
    "title": "Sound",
    "content": "A sound can be added to an object using: . sound=Sound(positional, poolSize, autoplay, src, ...) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#sound",
    "relUrl": "/content/python/attributes.html#sound"
  },"50": {
    "doc": "Attributes",
    "title": "GotoUrl",
    "content": "Goes to a url on click. goto_url=GotoUrl(dest, on, url) . Warning . click-listener must be True for this to work! . ",
    "url": "https://arena.conix.io/content/python/attributes.html#gotourl",
    "relUrl": "/content/python/attributes.html#gotourl"
  },"51": {
    "doc": "Attributes",
    "title": "Impulse",
    "content": "An impulse can be added by: . impulse=Impulse(on, force, position) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#impulse",
    "relUrl": "/content/python/attributes.html#impulse"
  },"52": {
    "doc": "Attributes",
    "title": "Physics",
    "content": "Physics (“none”, “static”, or “dynamic”) can be added with: . physics=Physics(type) . or . dynamic_body=Physics(type) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#physics",
    "relUrl": "/content/python/attributes.html#physics"
  },"53": {
    "doc": "Attributes",
    "title": "Text Input",
    "content": "Text input can be added with: . text_input=TextInput(on, title, label, placeholder) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#text-input",
    "relUrl": "/content/python/attributes.html#text-input"
  },"54": {
    "doc": "Attributes",
    "title": "Generic attribute",
    "content": "For attributes that are not specified by the library, you can use this (put anything you want in the “…”)! Inherit from this class to create custom attributes. Attribute(...) . ",
    "url": "https://arena.conix.io/content/python/attributes.html#generic-attribute",
    "relUrl": "/content/python/attributes.html#generic-attribute"
  },"55": {
    "doc": "Attributes",
    "title": "Additional Attributes (which are just specified as numbers or strings) may include persist, ttl, clickable, etc:",
    "content": "persist=True ttl=30 # seconds clickable=True # click_listener=True works too # etc. ",
    "url": "https://arena.conix.io/content/python/attributes.html#additional-attributes-which-are-just-specified-as-numbers-or-strings-may-include-persist-ttl-clickable-etc",
    "relUrl": "/content/python/attributes.html#additional-attributes-which-are-just-specified-as-numbers-or-strings-may-include-persist-ttl-clickable-etc"
  },"56": {
    "doc": "Attributes",
    "title": "Attributes",
    "content": " ",
    "url": "https://arena.conix.io/content/python/attributes.html",
    "relUrl": "/content/python/attributes.html"
  },"57": {
    "doc": "Authoring Program",
    "title": "ARENA AR Builder",
    "content": "An AR/VR capable editing tool to create/manipulate/delete ARENA objects. See top-level Python documentation for requirements. This tool uses the ARENA Persistence Database, so all changes are persisted. ",
    "url": "https://arena.conix.io/content/tools/authoring.html#arena-ar-builder",
    "relUrl": "/content/tools/authoring.html#arena-ar-builder"
  },"58": {
    "doc": "Authoring Program",
    "title": "Quick Start",
    "content": ". | Clone our Python repo https://github.com/conix-center/ARENA-py. | Usage: arb takes at minimum one argument, the first one, a scene name (hello in this example). python3 tools/arb/arb.py hello . | Interact with the tool at https://arenaxr.org/[your username]/hello | . ",
    "url": "https://arena.conix.io/content/tools/authoring.html#quick-start",
    "relUrl": "/content/tools/authoring.html#quick-start"
  },"59": {
    "doc": "Authoring Program",
    "title": "Demo Video",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/authoring.html#demo-video",
    "relUrl": "/content/tools/authoring.html#demo-video"
  },"60": {
    "doc": "Authoring Program",
    "title": "Usage",
    "content": "usage: arb.py [-h] [-n NAMESPACE] [-b BROKER] [-p PORT] [-r REALM] [-m MODELS] [-d] scene ARENA AR Builder. positional arguments: scene ARENA scene name optional arguments: -h, --help show this help message and exit -n NAMESPACE, --namespace NAMESPACE ARENA namespace -b BROKER, --broker BROKER MQTT message broker hostname -p PORT, --port PORT MQTT message broker port -r REALM, --realm REALM ARENA realm name -m MODELS, --models MODELS JSON GLTF manifest -d, --debug Debug mode. ",
    "url": "https://arena.conix.io/content/tools/authoring.html#usage",
    "relUrl": "/content/tools/authoring.html#usage"
  },"61": {
    "doc": "Authoring Program",
    "title": "Clickable Objects ONLY",
    "content": "The current version of ARB is only able to interact with existing persisted objects if they have click-handlers implemented (object.update(clickable=True)). Clickable objects will turn your cursor from an arrow to a finger pointing as you hover over them. For the time being, anything you create with ARB will have click-handlers implemented automatically. ",
    "url": "https://arena.conix.io/content/tools/authoring.html#clickable-objects-only",
    "relUrl": "/content/tools/authoring.html#clickable-objects-only"
  },"62": {
    "doc": "Authoring Program",
    "title": "Basic Object Manipulation",
    "content": "When you set the mode to None, Rotate, Nudge, Stretch, Scale, you can manipulate objects in various ways. AR One-Finger, VR Left-Click . | Tap 1 finger with reticle (AR) or cursor (VR) on the cones to activate one-direction granular manipulation. | . AR Two-Finger . | Tap and hold 2 thumbs with reticle (AR) on the cones to activate free manipulation along that axis. | Move the device in AR to position, scale and rotate. | . AR Three-Finger . | Tap and hold 2 thumbs and tap 1 more finger to toggle modes: None, Rotate, Nudge, Stretch, Scale. | . ",
    "url": "https://arena.conix.io/content/tools/authoring.html#basic-object-manipulation",
    "relUrl": "/content/tools/authoring.html#basic-object-manipulation"
  },"63": {
    "doc": "Authoring Program",
    "title": "Control Panel",
    "content": ". | VR Mode: Click and hold your mouse to move your camera relative to the panel. | AR Mode: Move your AR device to move your camera relative to the panel. | All Modes: Use the lock button to reposition the panel relative to your camera’s rotation. | . | Button | Type | Description | . | color | action | Allows color select; tap object to color it (default=#ffffff). | . | create | action | Allows shape select; tap clipboard object to create it in place (default=sphere). | . | delete | action | Tap object to delete it. | . | edit | toggle | Turns on click-listeners for every object in the scene via changing the scene-options object. Requires page reload (default=off). | . | lamp | toggle | Turns a headlamp on/off (default=off). | . | lock | toggle | Off=panel maintains relative world position; On=panel follows camera rotation (default=off). | . | model | action | Allows GLTF model select; tap clipboard object to create it in place (default=duck.glb). Models may be imported via the -m argument (see below). | . | move | action | Tap an object to show it in the clipboard, tap clipboard object to move it to that place. | . | nudge | action | Tap an object to show yellow nudge-lines, then tap a cone to nudge the object in that direction according to selected granularity (default=mm) Allows mm, cm, dm, m granularity. | . | occlude | action | Allows occlusion on/off select; tap object to occlude it (default=on). | . | parent | action | Allows setting of parent object; first tap the parent object, then tap the child object. | . | redpill | toggle | Reveals useful debug data: gridlines on the floor (y=0) can be seen from above and below, occlusion mask will show all occluded objects, object data mouse hover on an object will shows its position, rotation, and scale (default=off). | . | rename | action | Allows typing a new name; start typing or just tap an object to load the old name into the editor, then tap the object to apply the new name to. | . | rotate | action | Tap an object to show orange rotate-lines, then tap a cone to change object rotation according to selected granularity (default=1°). Allows 1°, 5°, 10°, 45°, 90° Euler angle granularity; Additional 6Dof lines will show degree of rotation. | . | scale | action | Tap an object to show blue scale-lines, then tap a cone to increase or decrease object scale according to selected granularity (default=mm). | . | slider | toggle | Off=Object manipulation via two-finger hold and move camera, On=Object manipulation via two-finger swipe (default=off). | . | stretch | action | Allows altering scale in one of 6Dof. | . | wall | action | Allows creation of a basic wall 0.1m thick; tap clipboard brick once with your AR device flush with one corner of the wall, and tap the second time at the opposing corner. Three alignment markers will appear for 2 minutes. | . ",
    "url": "https://arena.conix.io/content/tools/authoring.html#control-panel",
    "relUrl": "/content/tools/authoring.html#control-panel"
  },"64": {
    "doc": "Authoring Program",
    "title": "Clipboard",
    "content": "The clipboard is a temporary see-through object floating in front of the user used to show the relative position of placing a future object. It’s also used in AR to have something to fire an event at where no object currently exists. ",
    "url": "https://arena.conix.io/content/tools/authoring.html#clipboard",
    "relUrl": "/content/tools/authoring.html#clipboard"
  },"65": {
    "doc": "Authoring Program",
    "title": "Construction Cone",
    "content": "There is a small temporary object resting on position 0,0,0 in the shape of a construction cone to mark the origin of the scene. It will be removed when arb stops running. ",
    "url": "https://arena.conix.io/content/tools/authoring.html#construction-cone",
    "relUrl": "/content/tools/authoring.html#construction-cone"
  },"66": {
    "doc": "Authoring Program",
    "title": "Run Options",
    "content": "Importing Models . You can import a json-formatted manifest of GLTF models using the command argument -m to use on the model control panel option. You can write your own, or use the example, arb-manifest.json. python3 tools/arb/arb.py hello -m arb-manifest.json . Scale varies widely between individual models, so experiment with the best scale to start with. arb-manifest.json . { \"models\": [ { \"name\": \"avocado\", \"url_gltf\": \"store/models/Avocado.glb\", \"scale\": 5 }, { \"name\": \"shuttle\", \"url_gltf\": \"store/models/Shuttle.glb\", \"scale\": 5 }, { \"name\": \"duck\", \"url_gltf\": \"store/models/Duck.glb\", \"scale\": 0.2 }, { \"name\": \"earth\", \"url_gltf\": \"store/models/Earth.glb\", \"scale\": 2 }, { \"name\": \"lantern\", \"url_gltf\": \"store/models/Lantern.glb\", \"scale\": 0.015 }, { \"name\": \"camera\", \"url_gltf\": \"store/models/AntiqueCamera.glb\", \"scale\": 0.05 } ] } . MQTT Host and Realm . By default all arb MQTT messages are published to the default message broker and topic (realm and scene you specify) using this scheme: . | default broker: oz.andrew.cmu.edu | default topic: realm/s/[your namespace]/hello | . To use your own MQTT message broker (-b) and/or realm (-r): . | custom broker: arena-west1.conix.io | custom topic: foo/s/[your namespace]/hello | . python tools/arb/arb.py hello -b arena-west1.conix.io -r foo . ",
    "url": "https://arena.conix.io/content/tools/authoring.html#run-options",
    "relUrl": "/content/tools/authoring.html#run-options"
  },"67": {
    "doc": "Authoring Program",
    "title": "Authoring Program",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/authoring.html",
    "relUrl": "/content/tools/authoring.html"
  },"68": {
    "doc": "Build Scenes",
    "title": "Build an ARENA Scene",
    "content": "note . We recommend the ARENA Overview to learn the about the main concepts of the ARENA. We will now do a quick tour of a simple interface to edit ARENA scenes. We will see how to create a scene and add some content to it. ",
    "url": "https://arena.conix.io/content/overview/build.html#build-an-arena-scene",
    "relUrl": "/content/overview/build.html#build-an-arena-scene"
  },"69": {
    "doc": "Build Scenes",
    "title": "Add a Scene",
    "content": "Head to the build page (in a new tab). If you never created a scene, it will look similar to this: . note . You might need to sign-in to use the build webpage. The conix in the upper right corner and in the User or Organization select is the username we used to login for this demo. Your username should appear there. As indicated in the Scenes select, your user has no scenes. Let us add one by pressing the + button (highlighted with a circle in the figure above). This will pop a dialog to create the new scene as follows. It is likely that you only have access to your User/Organization, so the first select will have only your username. Enter the name of the scene in the Scene input. You also have the choice to start your scene with some objects copied from the public/default scene. It is a good idea to do this, so let us leave it checked. Once you are done, press the Add Scene button, which will prompt a ‘Create Object create published’ popup message in the corner. The popup will disappear in a second. Let us take this time to have a look at a few other sections of the build page shown below. note . Because we let the ‘Add Objects From Default Scene’ option checked when creating the scene, it has an objects already: a scene options object. We will play with this in a bit. In the figure above, we numbered (orange boxes) the following sections of the page: . | Scene selection: Select the scene you are editing here. As we have seen, we can also add scenes. Additionally, we can delete a scene and force a refresh of the scene list. | 1.a. This area has a logout button, and a button that allows you to check your permissions. | . | Scene Objects: See a list of the objects persisted in the scene. At the bottom of the list there are buttons to delete, copy and select objects. To select a single object, click on its name (the line will become darker). You can press the object’s edit button (highlighted with a circle in the figure above) to edit its properties. | 2.a. This area lets you filter the objects in the object list. Click on the list to toggle show/hide of object types. | . | Add/Edit Object: This section allows editing the properties of a new or an existing object (by pressing the edit button in the object list). | . Let us see the Scene Objects and Add/Edit Objects sections in a little more detail now. ",
    "url": "https://arena.conix.io/content/overview/build.html#add-a-scene",
    "relUrl": "/content/overview/build.html#add-a-scene"
  },"70": {
    "doc": "Build Scenes",
    "title": "Edit Object Properties",
    "content": "Notice that, because we let the ‘Add Objects From Default Scene’ option checked when creating the scene, the scene list is now populated. If you did not check the option (or your setup does not have objects in the public/default scene), don’t worry; come back to this section later, after you know how to add a scene options object to the scene. Press the edit button of the scene options object (if it appears in your list): . | | . This will trigger a popup in the upper left corner indicating that the object properties were loaded into the form show in the Add/Edit Object section (the popup will disappear in a few seconds). You can now edit the object properties. When we are done editing the object, we can press the + Add/Update Object button to trigger an update. Below you have an example of how the entire Add/Edit Object section might look like after loading the scene options object. The Type select shows the type of the object being displayed. The ARENA has many object types as you can observe by opening the select. Most of the object types are 3D Objects, such as spheres, boxes, or GLTF models. There are also a few other object types to, for example, configure scenes (scene options) and to add programs to scene. Under the Type select you have some buttons to Clear form (for example, if you want to add a new object), to create an object identifier Gen object_id (some objects, such as programs, require long, unique identifiers), and the + Add/Update Object button to trigger an update of the object. Notice the Object JSON on the right, this is a text representation of the object being edited in the form. All object in the ARENA have a JSON representation. As you edit the form, the JSON will be updated. You can also edit the JSON directly and use the Update form to reflect those edits back to the form. The Validation below will output any validation error detected in the object. Have a look at the form. We will look closer at the sections within the form below, which are mainly defined by the object type (in this case, scene options). The first 4 properties of the form (object_id, action, persist, type) are common to all ARENA objects. warning . Note that the persit property defines if the object state is to be persisted, or not. In case persist=false, the object will not be added to the object list (Scene Objects section). The update (triggered by the Add/Update Object button) will only be seen by current observers of the scene, will be lost once they leave or reload and will not be seen by observers joining the scene after the update. A scene options object allows to set options for a preset environment in the scene, set some scene options (such as audio range, publish behavior, or scene privacy) and define some renderer settings. The properties that appear on the form (and, therefore, the options that are available to be configured with the object) can be set with the Properties button. Notice the 3 different sections of the scene options object: . The checkboxes allow to hide/show those sub-sections (in reality, these are objects themselves) of the top-level object (scene options). Notice that each sub-section has it’s own Properties button. For example, the environment presets: . tip . Feel free to add properties and set their values to see their effect in the scene. Later, we will add a nice model to our scene. To prepare the scene for it, try to set the environment preset to forest, add a point light to the scene at 0, 5, 0 (x, y, z), and set shadows to true: . note . The order of the fields might be different for you (depending on the order you added them). After making the edits, update the object by pressing the + Add/Update Object button. You will have to reload the scene to have the new scene options applied. warning . Contrary to most objects in the ARENA, most scene options require a scene reload to take effect. ",
    "url": "https://arena.conix.io/content/overview/build.html#edit-object-properties",
    "relUrl": "/content/overview/build.html#edit-object-properties"
  },"71": {
    "doc": "Build Scenes",
    "title": "Add new Objects",
    "content": "Let us try to add a new object to our scene. We will add a GLTF model of the Mammuthus primigenius (Blumbach). In order to use it in the ARENA, we uploaded a .glb copy to dropbox and shared it publicly: https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0. note . Why Dropbox? ARENA internally converts dropbox share links into dl.dropboxusercontent.com, which currently allows the ARENA to use the content hosted at dropbox due to Cross-origin Resource Sharing. warning . When using downloaded models, please make sure that the author is properly credited. Start by selecting the GLFT model object type from the Type select at the top of the Add/Edit Object section: . As you select the GLTF model, the form will change to the default properties for this object type. Let us edit the form and enter: . | object_id: blumbach (any name that identifies the model will do) | action: create (creating the object) | persist: true (want to persist) | Url: https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0 (the dropbox share link) | Position: 0, 1.7, -5, (x, y, z) | Rotation: 0, 45, 0, (x, y, z) | Scale: 1, 1, 1, (x, y, z) | . In order to have nice shadows from our model, add a shadow property to the GLTF model: . And enable both cast and receive shadows: . Update the object by pressing the + Add/Update Object button. Now, if you open the scene in your browser by following the link at the top of the page: . You should have a magnificent Mammuthus primigenius (Blumbach) in your scene! . tip . Other object types (3D objects, scene options, landmarks) can be added in a similar way. Add Landmarks . A list of Landmarks is shown from the button at the bottom left corner of the screen . Landmarks allow to jump to certain places on interest in a scene. If you copied the landmarks from scene/public, it is likely that you have a single landmark pointing to a Screenshare: . Let us add a landmark to Mammuthus primigenius (Blumbach) model. This way, wherever we are in the scene, we can quickly jump to be near it. Start by selecting existing the Mammuthus object from the list. Update the object by pressing the + Add/Update Object button. Under the GLTF Model Data section, click on the Properties, and check/add the Landmark property. Add the label “Mammuthus primigenius (Blumbach)”. The landmarks list will automatically update once this is property is added. Now in the landmarks list and press the ‘Mammuthus primigenius (Blumbach)’ entry. tip . You can control the distance and/or position you are placed from a landmark in the landmark properties either with a randomRadiusMin and randomRadiusMax, or an offsetPosition. Otherwise, you may be placed in the middle of the object! . ",
    "url": "https://arena.conix.io/content/overview/build.html#add-new-objects",
    "relUrl": "/content/overview/build.html#add-new-objects"
  },"72": {
    "doc": "Build Scenes",
    "title": "Link your scene to the physical world",
    "content": "You can make a scene you create linkable to the physical world by adding its coordinates to the ATLAS tool (requires write permission to list coordinates). This will allow users in Augmented Reality (AR) to discover your ARENA scene when they are in physical range of it. Icons made by Smashicons, Freepik from www.flaticon.com . ",
    "url": "https://arena.conix.io/content/overview/build.html#link-your-scene-to-the-physical-world",
    "relUrl": "/content/overview/build.html#link-your-scene-to-the-physical-world"
  },"73": {
    "doc": "Build Scenes",
    "title": "Build Scenes",
    "content": " ",
    "url": "https://arena.conix.io/content/overview/build.html",
    "relUrl": "/content/overview/build.html"
  },"74": {
    "doc": "Scene Callbacks",
    "title": "ARENA Library Scene Callbacks",
    "content": "Library supported callback functions. ",
    "url": "https://arena.conix.io/content/python/callbacks.html#arena-library-scene-callbacks",
    "relUrl": "/content/python/callbacks.html#arena-library-scene-callbacks"
  },"75": {
    "doc": "Scene Callbacks",
    "title": "Scene callbacks",
    "content": "on_msg_callback . This is called whenever there is a new message sent to the client. Use this whenever you want to sniff out all incoming messages. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def on_msg_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.on_msg_callback = on_msg_callback . new_obj_callback . This is called whenever there is a new object that has been created in the scene, one that the user does not have a reference to. Use this to make references to any new objects that may appear during a programs lifetime. Also a good way to find camera ID’s. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def new_obj_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.new_obj_callback = new_obj_callback . delete_obj_callback . This is called whenever there is an object has been deleted in the scene. ARENA-py will look for all “action” = “delete” messages and call this callback. Use this to delete references and to be notified when an object is removed by another user or program. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def delete_obj_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.delete_obj_callback = delete_obj_callback . ",
    "url": "https://arena.conix.io/content/python/callbacks.html#scene-callbacks",
    "relUrl": "/content/python/callbacks.html#scene-callbacks"
  },"76": {
    "doc": "Scene Callbacks",
    "title": "User callbacks",
    "content": "user_join_callback . This is called whenever the library detects/finds a new user that it hasn’t seen before in a scene. Note: this is not neccesarily called when a user “joins” a scene, rather, it is called when the library first sees a Camera object/receives an “update” message from a user. Usage: . def user_join_callback(camera): ## Get access to user state # camera is a Camera class instance (see Objects) camera.object_id camera.displayName camera.hasVideo camera.displayName # etc. scene.user_join_callback = user_join_callback . user_left_callback . This is called whenever a user leaves a scene/sends a delete message. Usage: . def user_left_callback(camera): ## Get access to user state # camera is a Camera class instance (see Objects) camera.object_id camera.displayName camera.hasVideo camera.displayName # etc. scene.user_left_callback = user_left_callback . Adding callbacks when you instantiate the class . You can also add callbacks like so: . from arena import * def on_msg_callback(scene, obj, msg): pass def new_obj_callback(scene, obj, msg): pass def delete_obj_callback(scene, obj, msg): pass scene = Scene(..., on_msg_callback=on_msg_callback, new_obj_callback=new_obj_callback, delete_obj_callback=delete_obj_callback) . ",
    "url": "https://arena.conix.io/content/python/callbacks.html#user-callbacks",
    "relUrl": "/content/python/callbacks.html#user-callbacks"
  },"77": {
    "doc": "Scene Callbacks",
    "title": "Custom Message Callbacks",
    "content": "If you need to use an MQTT client, the Scene object exposes a way to use its MQTT client to subscribe to custom topics. def led_toggle(client, userdata, msg): # do stuff here scene.message_callback_add(\"custom/control/light\", led_toggle) . ",
    "url": "https://arena.conix.io/content/python/callbacks.html#custom-message-callbacks",
    "relUrl": "/content/python/callbacks.html#custom-message-callbacks"
  },"78": {
    "doc": "Scene Callbacks",
    "title": "Scene Callbacks",
    "content": " ",
    "url": "https://arena.conix.io/content/python/callbacks.html",
    "relUrl": "/content/python/callbacks.html"
  },"79": {
    "doc": "Contributing",
    "title": "Contributing to the ARENA",
    "content": "Thanks for your willingness to help improve our flexible, programmatic, mixed-reality platform! The ARENA is a research platform managed by the CONIX Research Center, a collaboration between six US-based universities. This guide will help you find the right path to contribute. Feel free to join the ARENA CONIX slack and ask us questions. ",
    "url": "https://arena.conix.io/content/contributing.html#contributing-to-the-arena",
    "relUrl": "/content/contributing.html#contributing-to-the-arena"
  },"80": {
    "doc": "Contributing",
    "title": "Research Platform",
    "content": "The ARENA may be deployed by you or us in many different locations. We maintain a production ARENA Server instance at arenaxr.org. ",
    "url": "https://arena.conix.io/content/contributing.html#research-platform",
    "relUrl": "/content/contributing.html#research-platform"
  },"81": {
    "doc": "Contributing",
    "title": "Proposing New Features",
    "content": "If you want to work on something that there is no GitHub issue for, it’s best to document your plan before working on a Pull Request. To do so, follow these steps: . 1. Create a new GitHub issue associated with the relevant repository and propose your change there with: . | Why is the change needed? | How will it be implemented? | . 2. An ARENA team member will respond and let you know if the Issue is acceptable to work on or if some implementation modification is needed. 3. If you have questions or are not sure about the feature, please do ask us questions in our ARENA CONIX slack Slack #questions channel. ",
    "url": "https://arena.conix.io/content/contributing.html#proposing-new-features",
    "relUrl": "/content/contributing.html#proposing-new-features"
  },"82": {
    "doc": "Contributing",
    "title": "Issue Reporting",
    "content": ". | There are 2 basic things that will help us greatly for any issue you report: . | Is it reproducible and what are the steps to reproduce the problem? | Where was the issue? Which hostname and the version in use? | . | Deployed web server issues please include version here from the commit history at https://github.com/conix-center/arena-services-docker . | Python client issues please include the version here from pip show arena-py. | . ",
    "url": "https://arena.conix.io/content/contributing.html#issue-reporting",
    "relUrl": "/content/contributing.html#issue-reporting"
  },"83": {
    "doc": "Contributing",
    "title": "Pull Requests and Code Review",
    "content": "Some changes will require internal discussion to see if the needs of the project are still being met which can change from time to time. A list of which repo to use are listed at the end of this guide. | A great way to start is to try development of a scene using the Python and scene builder tutorials. | Once familiar, good first issues to help with are labeled with help wanted and good first issue. | . ",
    "url": "https://arena.conix.io/content/contributing.html#pull-requests-and-code-review",
    "relUrl": "/content/contributing.html#pull-requests-and-code-review"
  },"84": {
    "doc": "Contributing",
    "title": "Process for Pull Requests",
    "content": ". | Create your own fork of the appropriate repository and clone it and any submodules. | Create your own branch with the name of your change, and do not use master or main branches for your change. | Create a draft PR for your changes. | Push changes to your PR/branch often. | Submit your PR and request a code review from us. | After all rounds of review feedback are addressed we will manage merging the PR. | . ",
    "url": "https://arena.conix.io/content/contributing.html#process-for-pull-requests",
    "relUrl": "/content/contributing.html#process-for-pull-requests"
  },"85": {
    "doc": "Contributing",
    "title": "Language Style Guides",
    "content": "We use a number of languages and technologies to run the ARENA. You may need to have at least a basic familiarity with JavaScript, Python, and CSS/HTML. As such, we have some guidance for maintaining some style standards in each repo. ",
    "url": "https://arena.conix.io/content/contributing.html#language-style-guides",
    "relUrl": "/content/contributing.html#language-style-guides"
  },"86": {
    "doc": "Contributing",
    "title": "Which Issue Tracker?",
    "content": "The ARENA is composed from a number of repositories. That can be confusing. We recommend searching for an existing issue from our list first and familiarizing yourself with this basic map: . | ARENA Client Website: conix-center/ARENA-core/issues | ARENA Python client: conix-center/ARENA-py/issues | ARENA Docs Website: conix-center/ARENA/issues | . Server components: . | ATLAS Server: conix-center/ATLAS/issues | ARENA MQTT Broker: conix-center/ARENA-broker/issues | ARENA Runtime Supervisor: conix-center/arts/issues | ARENA User Account DB: conix-center/arena-account/issues | ARENA User Scene Persistence DB: conix-center/arena-persist/issues | ARENA User File Manager: conix-center/arena-store/issues | . ",
    "url": "https://arena.conix.io/content/contributing.html#which-issue-tracker",
    "relUrl": "/content/contributing.html#which-issue-tracker"
  },"87": {
    "doc": "Contributing",
    "title": "Code of Conduct",
    "content": "We adhere to the Contributor Covenant Code of Conduct: https://www.contributor-covenant.org/version/2/0/code_of_conduct/code_of_conduct.md . ",
    "url": "https://arena.conix.io/content/contributing.html#code-of-conduct",
    "relUrl": "/content/contributing.html#code-of-conduct"
  },"88": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": " ",
    "url": "https://arena.conix.io/content/contributing.html",
    "relUrl": "/content/contributing.html"
  },"89": {
    "doc": "Coordinate Frame",
    "title": "Coordinate Frame",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/architecture/coordinate-frame.html",
    "relUrl": "/content/architecture/coordinate-frame.html"
  },"90": {
    "doc": "JSON Spec",
    "title": "ARENA MQTT Message Payload JSON Specification",
    "content": "Each ARENA message is JSON formatted and is structured for its general use and persistence within the ARENA environment. Each message begins with a Scene Message object of general properties, paired with a more granular detailed data sub-object which varies in form and follow the examples below. | ARENA-core webserver repository | . Coming soon . Another column can be added which defines which properties are ARENA-format JSON, and which are Arbitrary A-Frame JSON properties which are applied in HTML as attributes. ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#arena-mqtt-message-payload-json-specification",
    "relUrl": "/content/messaging/definitions.html#arena-mqtt-message-payload-json-specification"
  },"91": {
    "doc": "JSON Spec",
    "title": "Examples",
    "content": "Object Message . Scene Message object with a data property of the Object Data object. {\"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 1, \"y\": 1, \"z\": -1}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}, \"color\": \"#FF0000\"}} . Event Message . Scene Message object with a data property of the Event Data object. {\"object_id\": \"fallBox2\", \"action\": \"clientEvent\", \"type\": \"mousedown\", \"data\": {\"position\": {\"x\": -0.993, \"y\": 0.342, \"z\": -1.797}, \"source\": \"camera_8715_er\"}} . Program Message . Scene Message object with a data property of the Program Data object. {\"object_id\": \"6aafedf3-e313-4785-a456-939de8677f07\", \"action\": \"update\", \"persist\": true, \"type\": \"program\", \"data\": {\"name\": \"wiselab/arb\", \"instantiate\": \"single\", \"filename\": \"arb.py\", \"filetype\": \"PY\", \"args\": [\"${scene}\", \"-b\", \" ${mqtth}\"]}} . Scene Options Message . Scene Message object with a data property of the Scene Options Data object. {\"object_id\": \"e9a16478-2606-4cd0-bb9f-b03879bc8baa\", \"action\": \"update\", \"persist\": true, \"type\": \"scene-options\", \"data\": {\"env-presets\": {\"active\": true, \"lighting\": \"distant\", \"lightPosition\": {\"x\": 0, \"y\": 1, \"z\": -10}, \"ground\": \"hills\", \"groundTexture\": \"squares\", \"groundColor\": \"#444241\", \"groundYScale\": 0.5}, \"scene-options\": {\"jitsiServer\": \"jitsi1.andrew.cmu.edu\", \"clickableOnlyEvents\": true, \"privateScene\": true}}} . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#examples",
    "relUrl": "/content/messaging/definitions.html#examples"
  },"92": {
    "doc": "JSON Spec",
    "title": "How to Read These Tables",
    "content": ". | property JSON name of the property, also a link to an example if available. | support Support libraries: A: ARENA-Managed property H: Arbitrary A-Frame HTML property P: Python library property | type JSON property type: string, number, boolean, or another named object type with a link. | description JSON property description. (Any default settings for the property, or if the property is required.) | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#how-to-read-these-tables",
    "relUrl": "/content/messaging/definitions.html#how-to-read-these-tables"
  },"93": {
    "doc": "JSON Spec",
    "title": "“Scene Message” object",
    "content": "This is the main payload body of every MQTT scene topic in the ARENA. properties . | property | support | type | description | . | object_id | A/P | string | A unique name within the scene (required). | . | action | A/P | string | An action to perform: create, delete, update, clientEvent (required). | . | type | A/P | string | Message type: object, program, scene-options, rig, camera-override, mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup, gripdown, gripup, menudown, menuup, systemdown, systemup, trackpaddown, trackpadup. | . | persist | A/P | boolean | Save to persistence database (default: false). | . | ttl | A/P | number | Time-to-live seconds to create the object and automatically delete (default: 0). | . | data | A/P | Object Data object | The detailed properties of a 3d object in the scene. Used by Message Type object. | . | data | A/P | Event Data object | The detailed properties of an event in the scene. Used by Event Type mousedown (and others), Action: clientEvent. | . | data | A | Program Data object | The detailed properties of a program managed by the runtime manager in the scene. Used by Message Type program. | . | data | A | Scene Options Data object | The detailed properties of the scene environment. Used by Message Type scene-options. | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#scene-message-object",
    "relUrl": "/content/messaging/definitions.html#scene-message-object"
  },"94": {
    "doc": "JSON Spec",
    "title": "Actions",
    "content": "The create, update, and delete actions are similar to typical C(R)UD operations. | create - Upserts an object. If the object already does exist, data fields will be merged. | update - Merges the data attributes with a currently existing object. To remove an attribute, set the value to null. | delete - Delete an object. No data field required. | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#actions",
    "relUrl": "/content/messaging/definitions.html#actions"
  },"95": {
    "doc": "JSON Spec",
    "title": "“Object Data” object",
    "content": "Arbitrary A-Frame Components . Some A-Frame attributes and components we don’t officially include in our JSON may be usable by following certain patterns of use. We make no promises! . properties . | property | support | type | description | . | object_type | A/P | string | A primitive object type: cube, sphere, circle, cone, cylinder, dodecahedron, icosahedron, tetrahedron, octahedron, plane, ring, torus, torusKnot, triangle | . |   | A/P |   | …or, A complex object type: gltf_model, image, particle, text, line, light, thickline | . |   | A |   | …or, A presence object type : camera, viveLeft, viveRight (camera is used by web browsers and VIO cameras) | . | position | A/P | Position object | Position of the object’s origin in 3d, relative to world-origin. | . | rotation | A/P | Rotation object | Quaternion rotation of the object. | . | scale | A/P | scale object | Scale factor of the object in 3d. | . | color | A/P | string | A hexadecimal color or CSS/HTML color name (default: “#FFFFFF”). | . | text | A/P | string | Any string of ASCII characters. e.g. “Hello world!” | . | click-listener | A/P | string | Name of the click-listener, default can be empty string. e.g. “” | . | url | A/P | string | URI, relative or full path of a file. e.g. “store/models/Duck.glb” | . | material | A/P | Material object | The material properties of the object’s surface. | . | multisrc | A | Multisrc object | Define multiple visual sources applied to an object. | . | light | A | Light object | Properties of a light source. Used by object_type: light. | . | animation | A | Animation object | Animation rules of an object. | . | animation-mixer | A/P | Animation-Mixer object | Animation sequence rules. | . | start | A/P | Position object | Starting position of a line. Used by object_type: line. | . | end | A/P | Position object | Ending position of a line. Used by object_type: line. | . | meshline | A/P | Meshline object | A line type with multiple way-points. Used by object_type: thickline. | . | sound | A | Sound object | The sound properties of an object. Requires click-listener | . | dynamic-body | A/P | Dynamic-Body object | The physics rules an object should obey. | . | impulse | A/P | Impulse object | The force applied using physics. Requires click-listener | . | spe-particles | A | SPE-Particles object | Properties of the particles effects component and its animations. | . | environment | A | Environment object | Environment options. May be deprecated due to the new env-presets object. | . | collision-listener | A/P | string | Name of the collision-listener, default can be empty string. e.g. “” | . | parent | A/P | string | object_id of the object which is the parent. | . | goto-url | A | Goto URL object | Requires click-listener | . | landmark | P | Landmark object | A landmark either as teleport destination or starting point | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#object-data-object",
    "relUrl": "/content/messaging/definitions.html#object-data-object"
  },"96": {
    "doc": "JSON Spec",
    "title": "“position” object",
    "content": "Follows A-Frame position. properties . | property | support | type | description | . | x | A/P | number | X-axis distance from origin, in meters (default: 0, required). | . | y | A/P | number | Y-axis distance from origin, in meters (default: 0, required). | . | z | A/P | number | Z-axis distance from origin, in meters (default: 0, required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#position-object",
    "relUrl": "/content/messaging/definitions.html#position-object"
  },"97": {
    "doc": "JSON Spec",
    "title": "“rotation” object",
    "content": "Follows A-Frame rotation. properties . | property | support | type | description | . | x | A/P | number | Quaternion rotation around the X-axis (default: 0, required). | . | y | A/P | number | Quaternion rotation around the Y-axis (default: 0, required). | . | z | A/P | number | Quaternion rotation around the Z-axis (default: 0, required). | . | w | A/P | number | Quaternion value for theta (default: 1, required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#rotation-object",
    "relUrl": "/content/messaging/definitions.html#rotation-object"
  },"98": {
    "doc": "JSON Spec",
    "title": "“scale” object",
    "content": "Follows A-Frame scale. properties . | property | support | type | description | . | x | A/P | number | X-axis length of object, in meters (default: 1, required). | . | y | A/P | number | Y-axis length of object, in meters (default: 1, required). | . | z | A/P | number | Z-axis length of object, in meters (default: 1, required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#scale-object",
    "relUrl": "/content/messaging/definitions.html#scale-object"
  },"99": {
    "doc": "JSON Spec",
    "title": "“material” object",
    "content": "Follows A-Frame material. properties . | property | support | type | description | . | src | A | string | URI, relative or full path of an image/video file. e.g. “images/360falls.mp4” | . | transparent | A/P | boolean | e.g. true | . | opacity | A/P | number | e.g. 0.5 | . | colorWrite | A/P | boolean | e.g. false | . | render-order | A/P | string | e.g. “0” | . | side | A | string | e.g. “back” | . | color | A | string | A hexadecimal color or CSS/HTML color name (default: “#FFFFFF”). | . | repeat | A | Repeat object | Used by material: repeat. | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#material-object",
    "relUrl": "/content/messaging/definitions.html#material-object"
  },"100": {
    "doc": "JSON Spec",
    "title": "“repeat” object",
    "content": "Follows A-Frame repeating-textures. properties . | property | support | type | description | . | x | A | number | e.g. 4 (required). | . | y | A | number | e.g. 4 (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#repeat-object",
    "relUrl": "/content/messaging/definitions.html#repeat-object"
  },"101": {
    "doc": "JSON Spec",
    "title": "“multisrc” object",
    "content": "properties . | property | support | type | description | . | srcspath | A | string | URI, relative or full path of a directory containing srcs, e.g. “images/dice/” (required). | . | srcs | A | string | A comma-delimited list if URIs, e.g. “side1.png, side2.png, side3.png, side4.png, side5.png, side6.png” (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#multisrc-object",
    "relUrl": "/content/messaging/definitions.html#multisrc-object"
  },"102": {
    "doc": "JSON Spec",
    "title": "“light” object",
    "content": "Follows A-Frame light. properties . | property | support | type | description | . | type | A | string | ambient, directional, hemisphere, point, spot e.g. “directional” (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#light-object",
    "relUrl": "/content/messaging/definitions.html#light-object"
  },"103": {
    "doc": "JSON Spec",
    "title": "“animation” object",
    "content": "Follows A-Frame animation. properties . | property | support | type | description | . | property | A | string | e.g. “rotation” | . | to | A | string | e.g. “0 360 0” | . | loop | A | boolean | e.g. true | . | dur | A | number | e.g. 10000 | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#animation-object",
    "relUrl": "/content/messaging/definitions.html#animation-object"
  },"104": {
    "doc": "JSON Spec",
    "title": "“animation-mixer” object",
    "content": "Follows Don McCurdy’s animation-mixer. properties . | property | support | type | description | . | clip | A/P | string | Name of the clip sequence in the GLTF “scene”. e.g. “Take 001” | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#animation-mixer-object",
    "relUrl": "/content/messaging/definitions.html#animation-mixer-object"
  },"105": {
    "doc": "JSON Spec",
    "title": "“meshline” object",
    "content": "properties . | property | support | type | description | . | lineWidth | A/P | number | e.g. 11 (required). | . | color | A/P | string | A hexadecimal color or CSS/HTML color name (default: “#FFFFFF”, required). | . | path | A/P | string | e.g. “0 0 0, 0 0 1” (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#meshline-object",
    "relUrl": "/content/messaging/definitions.html#meshline-object"
  },"106": {
    "doc": "JSON Spec",
    "title": "“sound” object",
    "content": "Follows A-Frame sound. properties . | property | support | type | description | . | src | A | string | URI, relative or full path of a directory containing a sound file, e.g. “audio/toypiano/asharp1.wav” (required). | . | on | A | string | mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup, gripdown, gripup, menudown, menuup, systemdown, systemup, trackpaddown, trackpadup (required). | . | positional | A | boolean | e.g. true | . | poolSize | A | number | e.g. 8 | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#sound-object",
    "relUrl": "/content/messaging/definitions.html#sound-object"
  },"107": {
    "doc": "JSON Spec",
    "title": "“dynamic-body” object",
    "content": "Follows aframe-physics-system. properties . | property | support | type | description | . | type | A/P | string | none, static, dynamic (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#dynamic-body-object",
    "relUrl": "/content/messaging/definitions.html#dynamic-body-object"
  },"108": {
    "doc": "JSON Spec",
    "title": "“impulse” object",
    "content": "Follows aframe-physics-system. properties . | property | support | type | description | . | on | A/P | string | mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup, gripdown, gripup, menudown, menuup, systemdown, systemup, trackpaddown, trackpadup (required). | . | force | A/P | string | e.g. “1 50 1” (required). | . | position | A/P | string | e.g. “1 1 1” (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#impulse-object",
    "relUrl": "/content/messaging/definitions.html#impulse-object"
  },"109": {
    "doc": "JSON Spec",
    "title": "“spe-particles” object",
    "content": "Follows aframe-spe-particles-component. properties . | property | support | type | description | . | texture | A | string | e.g. “textures/square.png” | . | color | A | string | e.g. “yellow, red” | . | particleCount | A | number | e.g. 3 | . | maxAge | A | number | e.g. 0.5 | . | maxAgeSpread | A | number | e.g. 1 | . | velocity | A | string | e.g. “40 200 40” | . | velocitySpread | A | string | e.g. “10 3 10” | . | wiggle | A | string | e.g. “50 0 50” | . | wiggleSpread | A | string | e.g. “15 0 15” | . | emitterScale | A | number | e.g. 8 | . | sizeSpread | A | number | e.g. 10 | . | randomizeVelocity | A | boolean | e.g. true | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#spe-particles-object",
    "relUrl": "/content/messaging/definitions.html#spe-particles-object"
  },"110": {
    "doc": "JSON Spec",
    "title": "“environment” object",
    "content": "properties . | property | support | type | description | . | preset | A/P | string | e.g. none, default, contact, egypt, checkerboard, forest, goaland, yavapai, goldmine, threetowers, poison, arches, tron, japan, dream, volcano, starry, osiris (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#environment-object",
    "relUrl": "/content/messaging/definitions.html#environment-object"
  },"111": {
    "doc": "JSON Spec",
    "title": "“goto-url” object",
    "content": "properties . | property | support | type | description | . | dest | A | string | popup, newtab, sametab e.g. “sametab” (required). | . | on | A | string | e.g. “mousedown” (required). | . | url | A | string | e.g. “http://www.formula1.com” (required). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#goto-url-object",
    "relUrl": "/content/messaging/definitions.html#goto-url-object"
  },"112": {
    "doc": "JSON Spec",
    "title": "“landmark” object",
    "content": "properties . | property | support | type | description | . | label | A | string | Label that shows up in landmarks list on bottom left of UI | . | randomRadiusMin | A | number | Random radius min distance to teleport | . | randomRadiusMax | A | number | Random radius max distance to teleport. Can be equal value as radius min, to enforce a circle of particular radius. | . | lookAtLandmark | A | boolean | When used with an offsetPosition or randomRadius, whether to rotate user camera to look at the landmark base position. | . | startingPosition | A | boolean | Whether to use this as a random starting position. Does not show up on landmarks list regardless of label | . | offsetPosition | A | Position object | Additive offset from object base position to teleport to e.g. { x: 3, y: 0, z: -1 } | . | constrainToNavMesh | A | string | One of false, any or coplanar to describe how a teleport should forcibly behave relative to a navigation mesh. false implies no forced constraint, any snaps to nearest navMesh, and coplanar only snaps to nearest navMeshes on same Y-plane | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#landmark-object",
    "relUrl": "/content/messaging/definitions.html#landmark-object"
  },"113": {
    "doc": "JSON Spec",
    "title": "“Event Data” object",
    "content": "properties . | property | support | type | description | . | position | A | Position object | The event destination position. (required) | . | clickPos | A | Position object | The event origination position. (required) | . | source | A | string | object_id of event origination. e.g “camera_8715_er1k” (required) | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#event-data-object",
    "relUrl": "/content/messaging/definitions.html#event-data-object"
  },"114": {
    "doc": "JSON Spec",
    "title": "“Program Data” object",
    "content": "Follows ARENA Program Schema . properties . | property | support | type | description | . | name | A | string | Name of the program in the format namespace/program-name. e.g. “wiselab/arb” (required) | . | affinity | A | string | Indicates the module affinity (client=client’s runtime; none or empty=any suitable/available runtime) (default: “client”) | . | instantiate | A | string | Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program. (default: “client”, required) | . | filename | A | string | Filename of the entry binary. e.g. “arb.py” (required) | . | filetype | A | string | Type of the program (WA=WASM or PY=Python) (default: “PY”, required) | . | args | A | string array | Command-line arguments (passed in argv). Supports variables: ${scene}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key} e.g. [ “${scene}”, “-b”, “ ${mqtth}” ] | . | env | A | string array | Environment variables. Supports variables: ${scene}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key} (default: [ “MID=${moduleid}”, “SCENE=${scene}”, “MQTTH=${mqtth}”, “REALM=realm” ], required) | . | channels | A | Channel object array | Channels describe files representing access to IO from pubsub and client sockets (possibly more in the future; currently only supported for WASM programs). | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#program-data-object",
    "relUrl": "/content/messaging/definitions.html#program-data-object"
  },"115": {
    "doc": "JSON Spec",
    "title": "“channel” object",
    "content": "Follows ARENA Program Schema . properties . | property | support | type | description | . | path | A | string | Folder visible by the program. (default: “/ch/${scene}”, required) | . | type | A | string | Pubsub or client socket. [ “pubsub”, “client” ] (default: “pubsub”, required) | . | mode | A | string | Access mode. [ “r”, “w”, “rw” ] (default: “rw”, required) | . | params | A | Params object | Type (i.e. pubsub/client)-specific parameters. | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#channel-object",
    "relUrl": "/content/messaging/definitions.html#channel-object"
  },"116": {
    "doc": "JSON Spec",
    "title": "“params” object",
    "content": "Follows ARENA Program Schema . properties . | property | support | type | description | . | topic | A | string | Pubsub topic (pubsub) (default: “realm/s/${scene}”) | . | host | A | string | Destination host address (client socket; ignored for now) | . | port | A | number | Destination port (client socket; ignored for now) | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#params-object",
    "relUrl": "/content/messaging/definitions.html#params-object"
  },"117": {
    "doc": "JSON Spec",
    "title": "“Scene Options Data” object",
    "content": "Follows ARENA Scene Options Schema . properties . | property | support | type | description | . | env-presets | A | env-presets object | Environment presets. | . | scene-options | A | scene-options object | Scene Options. | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#scene-options-data-object",
    "relUrl": "/content/messaging/definitions.html#scene-options-data-object"
  },"118": {
    "doc": "JSON Spec",
    "title": "“env-presets” object",
    "content": "Follows ARENA Scene Options Schema from the aframe-environment-component. properties . | property | support | type | description | . | active | A | boolean | Show/hides the environment presets component. Use this instead of using the visible attribute. (default: true, required) | . | preset | A | string | none, default, contact, egypt, checkerboard, forest, goaland, yavapai, goldmine, arches, threetowers, poison, tron, japan, dream, volcano, starry, osiris; An A-Frame preset environment. (default: “default”, required) | . | seed | A | number | Seed for randomization. If you don’t like the layout of the elements, try another value for the seed. (default: 1) | . | skyType | A | string | none, color, gradient, atmosphere; a sky type. (default: “color”) | . | skyColor | A | string | Sky color. (default: “#ffa500”) | . | horizonColor | A | string | Horizon color. (default: “#ffa500”) | . | lighting | A | string | none, distant, point; A hemisphere light and a key light (directional or point) are added to the scene automatically when using the component. Use none if you don’t want this automatic lighting set being added. The color and intensity are estimated automatically. (default: “distant”) | . | shadow | A | boolean | Shadows on/off. Sky light casts shadows on the ground of all those objects with shadow component applied. (default: false) | . | shadowSize | A | number | Size of the shadow, if applied. (default: 10) | . | lightPosition | A | Position object | Position of the main light. If skyType is atmospheric, only the orientation matters (is a directional light) and it can turn the scene into night when lowered towards the horizon. (default: {“x”: 0, “y”: 1, “z”: -0.2}) | . | fog | A | number | Amount of fog (0 = none, 1 = full fog). The color is estimated automatically. (default: 0) | . | flatShading | A | boolean | Whether to show everything smoothed (false) or polygonal (true). (default: false) | . | playArea | A | number | Radius of the area in the center reserved for the player and the game play. The ground is flat in there and no objects are placed inside. (default: 1) | . | ground | A | string | none, flat, hills, canyon, spikes, noise; Orography style. (default: “hills”) | . | groundScale | A | scale object | Ground dimensions (in meters). (default: {“x”: 1, “y”: 1, “z”: 1}) | . | groundYScale | A | number | Maximum height (in meters) of ground’s features (hills, mountains, peaks..). (default: 3) | . | groundTexture | A | string | none, checkerboard, squares, walkernoise; Texture applied to the ground. (default: “none”) | . | groundColor | A | string | Main color of the ground. (default: “#553e35”) | . | groundColor2 | A | string | Secondary color of the ground. Used for textures, ignored if groundTexture is none. (default: “#694439”) | . | dressing | A | string | none, cubes, pyramids, cylinders, hexagons, stones, trees, mushrooms, towers, apparatus, arches, torii; Dressing is the term we use here for the set of additional objects that are put on the ground for decoration. (default: “none”) | . | dressingAmount | A | number | number of objects used for dressing. (default: 10) | . | dressingColor | A | string | Base color of dressing objects. (default: “#795449”) | . | dressingScale | A | number | Height (in meters) of dressing objects. (default: 5) | . | dressingVariance | A | Scale object | Maximum x,y,z meters to randomize the size and rotation of each dressing object. Use 0 0 0 for no variation in size nor rotation. (default: {“x”: 1, “y”: 1, “z”: 1}) | . | dressingUniformScale | A | boolean | If false, a different value is used for each coordinate x, y, z in the random variance of size. (default: true) | . | dressingOnPlayArea | A | number | Amount of dressing on play area. (default: 0) | . | grid | A | string | none, 1x1, 2x2, crosses, dots, xlines, ylines; Grid, 1x1 and 2x2 are rectangular grids of 1 and 2 meters side, respectively. (default: “none”) | . | gridColor | A | string | Color of the grid. (default: “#ccc”) | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#env-presets-object",
    "relUrl": "/content/messaging/definitions.html#env-presets-object"
  },"119": {
    "doc": "JSON Spec",
    "title": "“scene-options” object",
    "content": "Follows ARENA Scene Options Schema . properties . | property | support | type | description | . | jitsiServer | A | string | Jitsi host used for this scene. (default: “mr.andrew.cmu.edu”) | . | bigscreen | A | string | Name of the 3D object used as a big screen when sharing desktop. (default: “bigscreen”) | . | clickableOnlyEvents | A | boolean | true = publish only mouse events for objects with click-listeners; false = all objects publish mouse events. (default: “true”) | . | privateScene | A | boolean | false = scene will be visible; true = scene will not show in listings. (default: “false”) | . | speedModifier | A | number | Movement speed mulitiplier to base 30. (e.g. speedModifier: 2 results in 60 speed) | . | navMesh | A | string | URL of gltf model to preload as nav-mesh | . ",
    "url": "https://arena.conix.io/content/messaging/definitions.html#scene-options-object",
    "relUrl": "/content/messaging/definitions.html#scene-options-object"
  },"120": {
    "doc": "JSON Spec",
    "title": "JSON Spec",
    "content": " ",
    "url": "https://arena.conix.io/content/messaging/definitions.html",
    "relUrl": "/content/messaging/definitions.html"
  },"121": {
    "doc": "Develop Python Programs",
    "title": "Introduction to ARENA Python Program Development",
    "content": "note . We recommend the ARENA Overview to learn the about the main concepts of the ARENA. You can define the appearance and behavior of objects in a scene using python programs, which take advantage of the fact that all objects in a scene are networked via a MQTT Publish-Subscribe (PubSub) messaging bus: . Note that the python program can be hosted anywhere with access to the MQTT bus. For simplicity, we will assume that your program is running on your local machine. However, the execution and hosting of programs can be handled by the ARENA itself, using ARTS. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#introduction-to-arena-python-program-development",
    "relUrl": "/content/overview/dev-guide.html#introduction-to-arena-python-program-development"
  },"122": {
    "doc": "Develop Python Programs",
    "title": "Install the ARENA Python library",
    "content": "The easiest way to begin programming in the ARENA is to install the Python library and create your first Python program. ARENA programs communicate over MQTT messages which govern all objects and their properties. This library is a wrapper which will allow you to easily send and receive those messages. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#install-the-arena-python-library",
    "relUrl": "/content/overview/dev-guide.html#install-the-arena-python-library"
  },"123": {
    "doc": "Develop Python Programs",
    "title": "Create a box and observe",
    "content": "Now, let us create a very simple Python program in the scene example, under the username you defined the first time you entered the arena. Start by opening the scene in your browser and notice it is empty, with default environment settings. note . Open the example scene under your arena username by entering the following URL in your browser: http://arenaxr.org/&lt;your-username&gt;/example . Copy the python script below, and paste it into a box.py file. After saving the file, execute the script (e.g. python3 box.py; make sure you installed the python library first). from arena import * # this creates an object for scene 'example' at the given arena host scene = Scene(host=\"arenaxr.org\", scene=\"example\") # define a task that will add a box to the scene @scene.run_once def make_box(): scene.add_object(Box()) # run the tasks defined for this scene scene.run_tasks() . Looking at the scene in your browser will let you see the box. Watch out, if you are at the origin, the box will be underneath you. By default, objects are generated in a random color, with no rotation, at x, y, z position (0, 0, 0), and with no other properties applied. Some of the other properties you can add to objects are detailed in our Python Examples. Notice that the box seems stuck in the ground, which is due to the box’s origin at its center positioned at scene coordinates (0, 0, 0). If you enable Flying mode (see User Guide), you can move below the ground plane and view the other half of the box. Type Ctrl-C to end the program. Now, go back to your browser and refresh the page. You will notice that the box disappeared. We will explain what is up with that in a moment. Now, let us create two boxes, one at x, y, z (1, 1, 1) and another at x, y, z (2, 2, 2). from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_once def make_box(): # red box at (1, 1, -3) box1 = Box(position=Position(1,1,-3), material=Material(color=(255,0,0))) scene.add_object(box1) # green box at (2, 2, -3) box2 = Box(position=Position(2,2,-3), material=Material(color=(0,255,0))) scene.add_object(box2) scene.run_tasks() . Once you run the script above, you can go back to the scene example in your browser to see the two boxes: . ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#create-a-box-and-observe",
    "relUrl": "/content/overview/dev-guide.html#create-a-box-and-observe"
  },"124": {
    "doc": "Develop Python Programs",
    "title": "Running from the Command Line",
    "content": "The target of which server, user and scene are set by the Scene(host=\"...\",scene=\"...\",namespace=\"...\",debug=False) function call. It is also possible to override these using shell environmental variables at the command line as shown below. This allows a simple way to re-target applications for your own environment without having to change the parameters manually in the code. export MQTTH=arenaxr.org export REALM=realm export SCENE=scene export NAMESPACE=namespace python3 box.py ... ===== Loading: https://arenaxr.org/namespace/scene, realm=realm Connecting to the ARENA... Connected! ===== ... If not specified the namespace is your current logged in user-id. The most common use-case is to simply update SCENE and MQTTH. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#running-from-the-command-line",
    "relUrl": "/content/overview/dev-guide.html#running-from-the-command-line"
  },"125": {
    "doc": "Develop Python Programs",
    "title": "Clients and Scene Callbacks",
    "content": "As a web browser user of the ARENA, you are connecting to the ARENA MQTT broker as one client connection, in which you are publishing your “camera” perspective as you move, and subscribing to changes in other objects and other users’ “camera” moves. Every time you run a Python program you are also connecting to the broker as another client connection, in which the above program published a message creating a box, and also subscribes you other users “camera” moves, and objects. Let’s try observing some of those other messages but adding the following code to your Python program. Add the scene_callback function, and also alter your arena.init() call, to accept the new callback and allow you to observe all the messages you have subscribed to in this scene. def on_msg_callback(obj): print(\"scene_callback: \", obj) scene.on_msg_callback = on_msg_callback . Move yourself around in the browser view and notice all the camera updates and positions and rotation changes as you move. This is way too much information to be human readable! However, you can filter out these messages for what you need, or even better, if you only need feedback for a specific object, like our box, as we cover next. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#clients-and-scene-callbacks",
    "relUrl": "/content/overview/dev-guide.html#clients-and-scene-callbacks"
  },"126": {
    "doc": "Develop Python Programs",
    "title": "Object callbacks",
    "content": "One way to reduce the flood of messages for your Python program is to define a callback specifically for one object, our box for example. Update your program to comment out all messages subscribed in the scene, add a callback just for your box object, and update the creation of your box object with a click-listener and the new box_callback. def on_msg_callback(obj): # print(\"scene_callback: \", obj) def box_callback(evt): print(\"box_callback: \", evt) box = Box(clickable=True, evt_handler=box_callback) . Now, in your scene use your mouse to click on the box and notice the messages you receive just from the box. You have useful information like: what type of event - mouse up/down/enter/leave, the owner of the event, the position of the owner, the position of the click. You can use this information to programmatically decide how to respond and begin creating a rich, interactive, 3d experience for your users. | What should mousedown do for this object? Change its color? | What should mouseenter or mouseleave do? Change its opacity? | Many more ideas are available in our examples. | . ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#object-callbacks",
    "relUrl": "/content/overview/dev-guide.html#object-callbacks"
  },"127": {
    "doc": "Develop Python Programs",
    "title": "Animate a GLTF model",
    "content": "A more advanced manipulation of objects in the ARENA is using 3d models as GLTF. Here we are going to use a GLTF model of a duck and some animation rules to make it rotate. from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") obj = GLTF(object_id=\"duck_1\", position=(-1, 1, -3), url=\"store/models/Duck.glb\") obj.dispatch_animation( Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ) ) scene.run_animations(obj) scene.run_tasks() . At your leisure, read more about methods to generate 3d content and animate objects and models. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#animate-a-gltf-model",
    "relUrl": "/content/overview/dev-guide.html#animate-a-gltf-model"
  },"128": {
    "doc": "Develop Python Programs",
    "title": "Use persistence, reload browser",
    "content": "Up until now, everything you have created has been non-persistent. That is, objects are only rendered in real-time for any browsers open to the example as MQTT messages are received. So, if you refresh your browser, notice that all the objects we created are gone, new visitors to this scene will not see them. To backup your scene objects into our persistence database you will have to specify persist=True in Python definitions. This is also true to when ARENA objects are created in other. The underlying message needs to specify if the object state is to be persisted or not. Go back to the previous python code and try to add persist=True to the duck object: . obj = Model(object_id=\"duck_1\", position=(-1, 1, -3), url=\"store/models/Duck.glb\" persit=True) . If you run the program again, you will notice that the duck remains in the scene, even across a refresh. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#use-persistence-reload-browser",
    "relUrl": "/content/overview/dev-guide.html#use-persistence-reload-browser"
  },"129": {
    "doc": "Develop Python Programs",
    "title": "Debug your scene with A-Frame Scene Inspector",
    "content": "Since the ARENA’s rendering uses the A-Frame web 3D rendering engine, you can open the A-Frame Scene Inspector on any scene to examine and manipulate any of the A-Frame elements in your scene. Try this now from your example scene by typing &lt;ctrl&gt; + &lt;alt&gt; + i on most systems. Examine the list of elements on the left side. Each element or object you select will show it’s details and attributes on the right side. You may edit any attributes here you wish, however, remember that the A-Frame Scene Inspector will not persist any changes to the persistence database. We do have a way to visually manipulate objects and save changes that we will share next. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#debug-your-scene-with-a-frame-scene-inspector",
    "relUrl": "/content/overview/dev-guide.html#debug-your-scene-with-a-frame-scene-inspector"
  },"130": {
    "doc": "Develop Python Programs",
    "title": "AR Builder, visual content authoring",
    "content": "We also have a Python program, AR Builder (ARB), which you can use to create and edit objects for your scene. You can use it in VR (virtual reality) as a way to edit your scene and save changes to the persistence database. Importantly, you can use it in AR (augmented reality) in combination with AR-supported browsers and localization techniques to anchor scene objects in physical space. note . AR-supported browsers still need customization from our lab to support visual localization tags. In either case, ARB allows any user in the scene to edit, so it can be used collaboratively by multiple users remotely as VR, in person as AR, or as XR (mixed reality), a combination of both. ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html#ar-builder-visual-content-authoring",
    "relUrl": "/content/overview/dev-guide.html#ar-builder-visual-content-authoring"
  },"131": {
    "doc": "Develop Python Programs",
    "title": "Develop Python Programs",
    "content": " ",
    "url": "https://arena.conix.io/content/overview/dev-guide.html",
    "relUrl": "/content/overview/dev-guide.html"
  },"132": {
    "doc": "Converting SketchUp Files",
    "title": "Converting Models",
    "content": "Models in the ARENA need to be in the *.GLTF or *.GLB format. Most models on Sketchfab can be downloaded as GLTF models, however there are a lot of models in the SketchUp format. ",
    "url": "https://arena.conix.io/content/3d-content/dimension.html#converting-models",
    "relUrl": "/content/3d-content/dimension.html#converting-models"
  },"133": {
    "doc": "Converting SketchUp Files",
    "title": "Using Adobe Dimension",
    "content": "To convert a model from SketchUp to GLB using Adobe Dimension (in this case, we’re using Adobe Dimension 2020), first click on “Create New” in the menu. In Dimension, there should be a blank file open now. Go to the top left to File &gt; Import &gt; 3D Model. Find your SketchUp model and select it. Your model should be visible in the scene now. In some cases, like the model of a building, there will be a texture like Google Earth Terrain, which we don’t want. In the scene list of objects on the upper right, even when expanded, the Google Earth Terrain isn’t visible right now. Double click on the terrain under the building to make it visible in the Scene list. Now, the Google Earth objects should be visible. Select them and delete them. Move the model or resize it however you desire. Then, in the scene list on the right, ake sure that the top level folder or object of the model is selected. Then, go to File &gt; Export &gt; Selected Models. When selecting the format, select GLB, not GLTF. For some reason, the exported GLTF files from dimension don’t seem to work on GLTFViewer/ARENA. You can change the name of the file and export location in “Save To”. Click Export, and you’re done! Now you can upload to the filestore and add to the ARENA. ",
    "url": "https://arena.conix.io/content/3d-content/dimension.html#using-adobe-dimension",
    "relUrl": "/content/3d-content/dimension.html#using-adobe-dimension"
  },"134": {
    "doc": "Converting SketchUp Files",
    "title": "Converting SketchUp Files",
    "content": " ",
    "url": "https://arena.conix.io/content/3d-content/dimension.html",
    "relUrl": "/content/3d-content/dimension.html"
  },"135": {
    "doc": "Downscaling Models",
    "title": "Downscaling 3D Model Size",
    "content": "Some models are far too large to quickly and easily load in an online 3D space. Using Blender, you can change the size of a GLTF model easily. ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html#downscaling-3d-model-size",
    "relUrl": "/content/3d-content/downscaling.html#downscaling-3d-model-size"
  },"136": {
    "doc": "Downscaling Models",
    "title": "Using Blender",
    "content": "When you first start Blender, open a new General file. By default, a new file will load a cube in the middle of the scene. Select the cube in the top right Scene Collection list, then right click and delete it. There will be no need for a cube here. ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html#using-blender",
    "relUrl": "/content/3d-content/downscaling.html#using-blender"
  },"137": {
    "doc": "Downscaling Models",
    "title": "Importing",
    "content": "Go to File &gt; Import &gt; glTF 2.0, and then locate your desired model. In this case, a 3d model of the Mellon Institute is being used. ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html#importing",
    "relUrl": "/content/3d-content/downscaling.html#importing"
  },"138": {
    "doc": "Downscaling Models",
    "title": "Changing Size",
    "content": "When you first load the model, you are inside of it. The scale of the model is massive. Zooming out will show the shape of the model, however there are no textures on it in the default Layout tab in Blender. The textures are still linked to the model, but will not show up during this process until it is finalized and exported. The scale of the model is currently 1, 1, 1. In the Scene Collection window, make sure that the imported model is selected. In the Transform tab under the Scene Collection window, the location, rotation, and scale can be changed, among other thigns. For the time being, set the scale of X, Y, and Z to 0.6. To get an idea of how large the model is, use the measuring tool in the menu on the left of the screen. Click on one edge of the model, and drag and release it at the end of one side of the model. In this case, the Mellon Institute scaled to 60% is still about 42 meters long, which will be huge in the ARENA. For this model, scaling it down to 10% and remeasuring shows it is a more reasonable size. ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html#changing-size",
    "relUrl": "/content/3d-content/downscaling.html#changing-size"
  },"139": {
    "doc": "Downscaling Models",
    "title": "Exporting",
    "content": "Now, go to File &gt; Export and choose to export the file as a GLTF or GLB file. The textures should scale to match the model and be applied when exporting. ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html#exporting",
    "relUrl": "/content/3d-content/downscaling.html#exporting"
  },"140": {
    "doc": "Downscaling Models",
    "title": "Downscaling Models",
    "content": " ",
    "url": "https://arena.conix.io/content/3d-content/downscaling.html",
    "relUrl": "/content/3d-content/downscaling.html"
  },"141": {
    "doc": "Events",
    "title": "Events in ARENA-py",
    "content": "Events are ways to interact with user input in the ARENA. See messaging. ",
    "url": "https://arena.conix.io/content/python/events.html#events-in-arena-py",
    "relUrl": "/content/python/events.html#events-in-arena-py"
  },"142": {
    "doc": "Events",
    "title": "Event handlers",
    "content": "To handle events in ARENA-py, you must set a function to the evt_handler parameter. When you attach an evt_handler to an Object, you will receive Event objects in your handler. Below is how you access attributes of the Event object. # [scene] is the Scene that called the callback # [evt] will be an Event instance # [msg] is the raw JSON message as a dict def click_handler(scene, evt, msg): ## Get Event type evt.type # == \"mousedown\", \"mouseup\", \"mouseenter\", \"mouseleave\", etc. ## Get Event data evt.data.clickPos evt.data.position evt.data.source # etc. box = Box(..., evt_handler=click_handler) # note the use of \"evt_handler=click_handler\" # could also do box.evt_handler = click_handler # or box.update_attributes(evt_handler=click_handler) . ",
    "url": "https://arena.conix.io/content/python/events.html#event-handlers",
    "relUrl": "/content/python/events.html#event-handlers"
  },"143": {
    "doc": "Events",
    "title": "Generating events with ARENA-py Scenes",
    "content": "Click Events . There are several types of click events that you can generate (mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup): . scene.generate_click_event(obj, type, ...) # add a click listener to an object to be able to click it obj.update_attributes(clickable=True) # generate a \"fake\" click event from ARENA-py scene.generate_click_event( obj, type=\"mouseup\" ) # ARENA-py will \"click\" obj with mouseup. In JSON, \"source\" will be defined as \"arena_lib_[some random ID here]\". Camera Manipulation Events . You can also move a user’s camera and/or make it look at a specific location or object: . scene.manipulate_camera(obj, type, ...) # move camera: scene.manipulate_camera( camera, position=(rando(),1.6,rando()), rotation=(0,0,0,1) ) # make camera look at something/some position: scene.look_at( camera, target=box # can also do a position: (0,0,0) ) . Generic Events . If there is an event that does not exist yet, you can use this to have more freedom in the event type: . # define custom event evt = Event(type=\"my_custom_event\", position=(3,4,5), target=sphere) # generate custom event with ARENA-py client scene.generate_custom_event(evt, action=\"clientEvent\") . ",
    "url": "https://arena.conix.io/content/python/events.html#generating-events-with-arena-py-scenes",
    "relUrl": "/content/python/events.html#generating-events-with-arena-py-scenes"
  },"144": {
    "doc": "Events",
    "title": "Appendix",
    "content": "Event(object_id, action, type, ...) . ",
    "url": "https://arena.conix.io/content/python/events.html#appendix",
    "relUrl": "/content/python/events.html#appendix"
  },"145": {
    "doc": "Events",
    "title": "Events",
    "content": " ",
    "url": "https://arena.conix.io/content/python/events.html",
    "relUrl": "/content/python/events.html"
  },"146": {
    "doc": "Examples",
    "title": "Messaging Format Examples",
    "content": "Warning . The code examples below are currently out of date and are being updated… . | ARENA-core webserver repository | . The structure of our MQTT messaging format is standardized into JSON. To run some of the commands below, you may need to install the Mosquitto client on your system: https://mosquitto.org/. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#messaging-format-examples",
    "relUrl": "/content/messaging/examples.html#messaging-format-examples"
  },"147": {
    "doc": "Examples",
    "title": "Draw a Cube",
    "content": "Instantiate a cube and set all of it’s basic parameters. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 1, \"y\": 1, \"z\": -1}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}, \"color\": \"#FF0000\"}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#draw-a-cube",
    "relUrl": "/content/messaging/examples.html#draw-a-cube"
  },"148": {
    "doc": "Examples",
    "title": "Color",
    "content": "Change only the color of the already-drawn cube. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"material\": {\"color\": \"#00FF00\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#color",
    "relUrl": "/content/messaging/examples.html#color"
  },"149": {
    "doc": "Examples",
    "title": "Transparency",
    "content": "Say the cube has already been drawn. In a second command, this sets 50% transparency. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"material\": {\"transparent\": true, \"opacity\": 0.5}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#transparency",
    "relUrl": "/content/messaging/examples.html#transparency"
  },"150": {
    "doc": "Examples",
    "title": "Move",
    "content": "Move the position of the already drawn cube. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"position\": {\"x\": 2, \"y\": 2, \"z\": -1}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#move",
    "relUrl": "/content/messaging/examples.html#move"
  },"151": {
    "doc": "Examples",
    "title": "Rotate",
    "content": "Rotate the already drawn cube; these are in quaternions, not A-Frame degrees. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"rotation\": {\"x\": 60, \"y\": 2, \"z\": 3}}}' . The quaternion (native) representation of rotation is a bit more tricky. The 4 parameters are X, Y, Z, W. Here are some simple examples: . | 1, 0, 0, 0: rotate 180 degrees around X axis | 0, 0.7, 0, 0.7: rotate 90 degrees around Y axis | 0, 0, -0.7, 0.7: rotate -90 degrees around Z axis | . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#rotate",
    "relUrl": "/content/messaging/examples.html#rotate"
  },"152": {
    "doc": "Examples",
    "title": "Animate",
    "content": "Animate rotation of the already drawn cube. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 10000}} }' . Other animations are available that resemble the \"data\": {\"animation\": { \"property\": ... }} blob above: see A-Frame Animation documentation for more examples. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#animate",
    "relUrl": "/content/messaging/examples.html#animate"
  },"153": {
    "doc": "Examples",
    "title": "Remove",
    "content": "Remove the cube. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"delete\"}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#remove",
    "relUrl": "/content/messaging/examples.html#remove"
  },"154": {
    "doc": "Examples",
    "title": "Images",
    "content": "Create an image on the floor. mosquitto_pub -h arenaxr.org -t realm/s/public/example/image_floor -m '{\"object_id\": \"image_floor\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"image\", \"position\": {\"x\": 0, \"y\": 0, \"z\": 0.4}, \"rotation\": {\"x\": -0.7, \"y\": 0, \"z\": 0, \"w\": 0.7}, \"url\": \"images/floor.png\", \"scale\": {\"x\": 12, \"y\": 12, \"z\": 2}, \"material\": {\"repeat\": {\"x\": 4, \"y\": 4}}}}' . URLs work in the URL parameter slot. Instead of images/2.png it would be e.g. url(http://arenaxr.org/images/foo.jpg). To update the image of a named image already in the scene, use this syntax. mosquitto_pub -h arenaxr.org -t realm/s/public/example/image_2 -m '{\"object_id\": \"image_2\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"material\": {\"src\": \"https://arenaxr.org/abstract/downtown.png\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#images",
    "relUrl": "/content/messaging/examples.html#images"
  },"155": {
    "doc": "Examples",
    "title": "Images on Objects",
    "content": "Use the multisrc A-Frame Component to specify different bitmaps for sides of a cube or other primitive shape. mosquitto_pub -h arenaxr.org -t realm/s/public/example/die1 -m '{\"object_id\": \"die1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 0, \"y\": 0.5, \"z\": -2}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}, \"color\": \"#ffffff\", \"dynamic-body\": {\"type\": \"dynamic\"}, \"multisrc\": {\"srcspath\": \"images/dice/\", \"srcs\": \"side1.png, side2.png, side3.png, side4.png, side5.png, side6.png\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#images-on-objects",
    "relUrl": "/content/messaging/examples.html#images-on-objects"
  },"156": {
    "doc": "Examples",
    "title": "Other Primitives: TorusKnot",
    "content": "Instantiate a wacky torusKnot, then turn it blue. Other primitive types are available in the in A-Frame docs. Here is a brief list: box circle cone cylinder dodecahedron icosahedron tetrahedron octahedron plane ring sphere torus torusKnot triangle. mosquitto_pub -h arenaxr.org -t realm/s/public/example/torusKnot_1 -m '{\"object_id\": \"torusKnot_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"torusKnot\", \"color\": \"red\", \"position\": {\"x\": 0, \"y\": 1, \"z\": -4}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/torusKnot_1 -m '{\"object_id\": \"torusKnot_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"material\": {\"color\": \"blue\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#other-primitives-torusknot",
    "relUrl": "/content/messaging/examples.html#other-primitives-torusknot"
  },"157": {
    "doc": "Examples",
    "title": "Models",
    "content": "Instantiate a glTF v2.0 binary model (file extension .glb) from a URL. mosquitto_pub -h arenaxr.org -t realm/s/public/example/gltf-model_1 -m '{\"object_id\": \"gltf-model_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"gltf-model\", \"url\": \"https://arenaxr.org/models/Duck.glb\", \"position\": {\"x\": 0, \"y\": 1, \"z\": -4}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#models",
    "relUrl": "/content/messaging/examples.html#models"
  },"158": {
    "doc": "Examples",
    "title": "Animating GLTF Models",
    "content": "To animate a GLTF model (see GLTF Files for how to find animation names), and set the animation-mixer parameter. mosquitto_pub -h arenaxr.org -t realm/s/public/example/gltf-model_3 -m '{\"object_id\": \"gltf-model_3\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"animation-mixer\": {\"clip\": \"*\"}}}' . The asterisk means “play all animations”, and works better in some situations, where other times the name of a specific animation in the GLTF file works (or maybe several in sequence). ",
    "url": "https://arena.conix.io/content/messaging/examples.html#animating-gltf-models",
    "relUrl": "/content/messaging/examples.html#animating-gltf-models"
  },"159": {
    "doc": "Examples",
    "title": "Relocalize Camera Rig",
    "content": "Move the camera rig (parent object of the camera) with ID camera_1234567890_er1k to a new coordinate (system). Values are x, y, z, (meters) x, y, z, w (quaternions). mosquitto_pub -h arenaxr.org -t realm/s/public/example/camera_1234567890_er1k -m '{\"object_id\": \"camera_1234567890_er1k\", \"action\": \"update\", \"type\": \"rig\", \"data\": {\"position\": {\"x\": 1, \"y\": 1, \"z\": 1}, \"rotation\": {\"x\": 0.1, \"y\": 0, \"z\": 0, \"w\": 1} }}' . This assumes we know our camera ID was assigned as 1234567890. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console in a message like my-camera name camera_1234567890_X. That might not be easily knowable without snooping MQTT messages, so the &amp;fixedCamera=er1k URL parameter lets us choose manually the unique ID. If used in the URL, the &amp;name= parameter is ignored, and the derived camera/user ID is based on fixedCamera, so would be in this case camera_er1k_er1k . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#relocalize-camera-rig",
    "relUrl": "/content/messaging/examples.html#relocalize-camera-rig"
  },"160": {
    "doc": "Examples",
    "title": "Move Camera",
    "content": "Move the camera with ID camera_1234567890_er1k to a new position. Values are x, y, z, (meters) x, y, z, w (quaternions). Action must be update. mosquitto_pub -h arenaxr.org -t realm/s/public/example/camera_1234567890_er1k -m '{\"object_id\":\"camera_1234567890_er1k\",\"action\":\"update\",\"type\":\"camera-override\",\"data\":{\"object_type\":\"camera\",\"position\":{\"x\":1.692,\"y\":1.6,\"z\":4.371},\"rotation\":{\"x\":0.003,\"y\":-0.003,\"z\":0,\"w\":1}}}' . This assumes we know our camera ID. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#move-camera",
    "relUrl": "/content/messaging/examples.html#move-camera"
  },"161": {
    "doc": "Examples",
    "title": "Camera Look At",
    "content": "Make the camera with ID camera_1234567890_er1k look at an object or coordinate. Target can be given as x, y, z coordinate object (e.g. {\"x\":1.692,\"y\":1.6,\"z\":4.371}), or as a string with an object ID (e.g. \"cone_587431\"). Action must be update. mosquitto_pub -h arenaxr.org -t realm/s/public/example/camera_1234567890_er1k -m '{\"object_id\":\"camera_1234567890_er1k\",\"action\":\"update\",\"type\":\"camera-override\",\"data\":{\"object_type\":\"look-at\",\"target\":\"cone_587431\"}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/camera_1234567890_er1k -m '{\"object_id\":\"camera_1234567890_er1k\",\"action\":\"update\",\"type\":\"camera-override\",\"data\":{\"object_type\":\"look-at\",\"target\":{\"x\": 0.467, \"y\": 2.066, \"z\": -1.027}}}' . This assumes we know our camera ID. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#camera-look-at",
    "relUrl": "/content/messaging/examples.html#camera-look-at"
  },"162": {
    "doc": "Examples",
    "title": "Text",
    "content": "Add some red text that says “Hello World”. mosquitto_pub -h arenaxr.org -t realm/s/public/example/text_3 -m '{\"object_id\": \"text_3\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"red\", \"text\": \"Hello world!\", \"object_type\": \"text\", \"position\": {\"x\": 0, \"y\": 3, \"z\": -4}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 1, \"y\": 1, \"z\": 1}}}' . Change text color properties A-Frame Text. mosquitto_pub -h arenaxr.org -t realm/s/public/example/text_3 -m '{\"object_id\": \"text_3\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"text\": {\"color\": \"green\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#text",
    "relUrl": "/content/messaging/examples.html#text"
  },"163": {
    "doc": "Examples",
    "title": "Lights",
    "content": "Create a red light in the scene. mosquitto_pub -h arenaxr.org -t realm/s/public/example/light_3 -m '{\"object_id\": \"light_3\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"light\", \"position\": {\"x\": 1, \"y\": 1, \"z\": 1}, \"rotation\": {\"x\": 0.25, \"y\": 0.25, \"z\": 0, \"w\": 1}, \"color\": \"#FF0000\"}}' . Default is ambient light. To change type, or other light A-Frame Light parameters, example: change to directional. Options: ambient, directional, hemisphere, point, spot. mosquitto_pub -h arenaxr.org -t realm/s/public/example/light_3 -m '{\"object_id\": \"light_3\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"light\": {\"type\": \"directional\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#lights",
    "relUrl": "/content/messaging/examples.html#lights"
  },"164": {
    "doc": "Examples",
    "title": "Sound",
    "content": "Play toy piano sound from a URL when you click a cube. Sets click-listener Component, waveform URL, and sound attribute. mosquitto_pub -h arenaxr.org -t realm/s/public/example/box_asharp -m '{\"object_id\": \"box_asharp\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 2.5, \"y\": 0.25, \"z\": -5}, \"scale\": {\"x\": 0.8, \"y\": 1, \"z\": 1}, \"color\": \"#000000\", \"sound\": {\"src\": \"url(https://arenaxr.org/audio/toypiano/Asharp1.wav)\", \"on\": \"mousedown\"}, \"click-listener\": \"\"}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#sound",
    "relUrl": "/content/messaging/examples.html#sound"
  },"165": {
    "doc": "Examples",
    "title": "360 Video",
    "content": "Draw a sphere, set the texture src to be an equirectangular video, on the ‘back’ (inside). mosquitto_pub -h arenaxr.org -t realm/s/public/example/sphere_vid -m '{\"object_id\": \"sphere_vid\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"sphere\", \"scale\": {\"x\": 200, \"y\": 200, \"z\": 200}, \"rotation\": {\"x\": 0, \"y\": 0.7, \"z\": 0, \"w\": 0.7}, \"color\": \"#808080\", \"material\": {\"src\": \"images/360falls.mp4\", \"side\": \"back\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#360-video",
    "relUrl": "/content/messaging/examples.html#360-video"
  },"166": {
    "doc": "Examples",
    "title": "Lines",
    "content": "Draw a purple line from (2, 2, 2) to (3, 3, 3). mosquitto_pub -h arenaxr.org -t realm/s/public/example/line_1 -m '{\"object_id\": \"line_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"line\", \"start\": {\"x\": 2, \"y\": 2, \"z\": 2}, \"end\": {\"x\": 3, \"y\": 3, \"z\": 3}, \"color\": \"#CE00FF\"}}' . Extend the line with a new segment, colored green. mosquitto_pub -h arenaxr.org -t realm/s/public/example/line_1 -m '{\"object_id\": \"line_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"line__2\": {\"start\": {\"x\": 3, \"y\": 3, \"z\": 3}, \"end\": {\"x\": 4, \"y\": 4, \"z\": 4}, \"color\": \"#00FF00\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#lines",
    "relUrl": "/content/messaging/examples.html#lines"
  },"167": {
    "doc": "Examples",
    "title": "Thicklines",
    "content": "A “thickline” (to improve openpose skeleton rendering visibility) - works like a line, but the lineWidth value specifies thickness, and multiple points can be specified at once, e.g. draw a pink line 11 pixels thick from 0, 0, 0 to 1, 0, 0 to 1, 1, 0 to 1, 1, 1. The shorthand syntax for coordinates is a bonus feature of lower level code; extending it for the rest of ARENA commands remains as an enhancement. mosquitto_pub -h arenaxr.org -t realm/s/public/example/thickline_8 -m '{\"object_id\": \"thickline_8\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"thickline\", \"lineWidth\": 11, \"color\": \"#FF88EE\", \"path\": \"0 0 0, 1 0 0, 1 1 0, 1 1 1\"}}' . You might be wondering, why can’t normal lines just use the scale value to specify thickness? But this one goes to eleven! Really though, normal lines perform faster. To update a “thickline” takes a special syntax because thicklines are really “meshline”s. mosquitto_pub -h arenaxr.org -t realm/s/public/example/thickline_8 -m '{\"object_id\": \"thickline_8\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"meshline\": {\"lineWidth\": 11, \"color\": \"#FFFFFF\", \"path\": \"0 0 0, 0 0 1\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#thicklines",
    "relUrl": "/content/messaging/examples.html#thicklines"
  },"168": {
    "doc": "Examples",
    "title": "Events",
    "content": "Add the “click-listener” event to a scene object; click-listener is a Component defined in events.js. This works for adding other, arbitrary Components. A non-empty message gets sent to the Component’s init: function. mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"click-listener\": \"enable\"}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#events",
    "relUrl": "/content/messaging/examples.html#events"
  },"169": {
    "doc": "Examples",
    "title": "Persisted Objects",
    "content": "If we want our objects to return to the scene when we next open or reload our browser, we can commit them on creation to the ARENA Persistence DB by setting \"persist\": true. mosquitto_pub -h arenaxr.org -t realm/s/public/example/Ball2 -m '{\"object_id\": \"Ball2\", \"action\": \"create\", \"persist\": true, \"data\": {\"position\": {\"x\": -1, \"y\": 1, \"z\": -1}, \"color\": \"blue\", \"object_type\": \"sphere\"}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#persisted-objects",
    "relUrl": "/content/messaging/examples.html#persisted-objects"
  },"170": {
    "doc": "Examples",
    "title": "Temporary Objects: TTL",
    "content": "It’s desirable to have objects that don’t last forever and pile up. For that there is the ‘ttl’ parameter that gives objects a lifetime, in seconds. This is an example usage for a sphere that disappears after 5 seconds. mosquitto_pub -h arenaxr.org -t realm/s/public/example/Ball2 -m '{\"object_id\": \"Ball2\", \"action\": \"create\", \"ttl\": 5, \"data\": {\"position\": {\"x\": -1, \"y\": 1, \"z\": -1}, \"color\": \"blue\", \"object_type\": \"sphere\"}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#temporary-objects-ttl",
    "relUrl": "/content/messaging/examples.html#temporary-objects-ttl"
  },"171": {
    "doc": "Examples",
    "title": "Transparent Occlusion",
    "content": "To draw a shape that is transparent, but occludes other virtual objects behind it (to simulate virtual objects hidden by real world surfaces like a wall or table), include in the data section this JSON. {\"material\": {\"colorWrite\": false}, \"render-order\": \"0\"} . colorWrite is an attribute of the THREE.js Shader Material that, by exposing it, we make accessible like others belonging to the Material A-Frame Component, and is an alternative way of controlling visibility. render-order is a custom Component that controls which objects are drawn first (not necessarily the same as which are “in front of” others). All other ARENA objects are drawn with render-order of 1. Note . This does not occlude the far background A-Frame layer (like environment component stars) but, in AR, that layer is not drawn anyway. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#transparent-occlusion",
    "relUrl": "/content/messaging/examples.html#transparent-occlusion"
  },"172": {
    "doc": "Examples",
    "title": "Background Themes",
    "content": "Adds one of many predefined backgrounds ( one of: none, default, contact, egypt, checkerboard, forest, goaland, yavapai, goldmine, threetowers, poison, arches, tron, japan, dream, volcano, starry, osiris) to the scene . mosquitto_pub -h arenaxr.org -t realm/s/public/example/env -m '{\"object_id\": \"env\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"environment\": {\"preset\": \"arches\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#background-themes",
    "relUrl": "/content/messaging/examples.html#background-themes"
  },"173": {
    "doc": "Examples",
    "title": "Physics",
    "content": "You can enable physics (gravity) for a scene object by adding the dynamic-body Component. mosquitto_pub -h arenaxr.org -t realm/s/public/example/box_3 -m '{\"object_id\": \"box_3\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"dynamic-body\": {\"type\": \"dynamic\"}}}' . One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. As an example, here are messages setting objects fallBox and fallBox2 to respond to mouseup and mousedown messages with an impulse with a certain force and position. mosquitto_pub -h arenaxr.org -t realm/s/public/example/fallBox2 '{\"object_id\": \"fallBox2\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"dynamic-body\": {\"type\": \"dynamic\"}, \"impulse\": {\"on\": \"mousedown\", \"force\": \"1 50 1\", \"position\": \"1 1 1\"}, \"click-listener\": \"\", \"position\": {\"x\": 0.1, \"y\": 4.5, \"z\": -4}, \"scale\": {\"x\": 0.5, \"y\": 0.5, \"z\": 0.5}}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/fallBox '{\"object_id\": \"fallBox\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"dynamic-body\": {\"type\": \"dynamic\"}, \"impulse\": {\"on\": \"mouseup\", \"force\": \"1 50 1\", \"position\": \"1 1 1\"}, \"click-listener\": \"\", \"position\": {\"x\": 0, \"y\": 4, \"z\": -4}, \"scale\": {\"x\": 0.5, \"y\": 0.5, \"z\": 0.5}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#physics",
    "relUrl": "/content/messaging/examples.html#physics"
  },"174": {
    "doc": "Examples",
    "title": "Parent/Child Linking",
    "content": "There is support to attach a child to an already-existing parent scene objects. When creating a child object, set the \"parent\": \"parent_object_id\" value in the JSON data. For example if parent object is gltf-model_Earth and child object is gltf-model_Moon, the commands would look like: . mosquitto_pub -h arenaxr.org -t realm/s/public/example/gltf-model_Earth -m '{\"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"gltf-model\", \"position\": {\"x\": 0, \"y\": 0.1, \"z\": 0}, \"url\": \"store/models/Earth.glb\", \"scale\": {\"x\": 5, \"y\": 5, \"z\": 5}}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/gltf-model_Moon -m '{\"object_id\": \"gltf-model_Moon\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"parent\": \"gltf-model_Earth\", \"object_type\": \"gltf-model\", \"position\": {\"x\": 0, \"y\": 0.05, \"z\": 0.6}, \"scale\": {\"x\": 0.05, \"y\": 0.05, \"z\": 0.05}, \"url\": \"store/models/Moon.glb\" }}' . Child objects inherit attributes of their parent, for example scale. Scale the parent, the child scales with it. If the parent is already scaled, the child scale will be reflected right away. Child position values are relative to the parent and also scaled. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#parentchild-linking",
    "relUrl": "/content/messaging/examples.html#parentchild-linking"
  },"175": {
    "doc": "Examples",
    "title": "Goto URL",
    "content": "Navigates to entirely new page into browser when clicked, or other event (requires click-listener). mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\" \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 1, \"y\": 1, \"z\": -1}, \"click-listener\": \"\", \"goto-url\": { \"dest\": \"newtab\", \"on\": \"mousedown\", \"url\": \"http: www.eet.com\"}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#goto-url",
    "relUrl": "/content/messaging/examples.html#goto-url"
  },"176": {
    "doc": "Examples",
    "title": "Landmark",
    "content": "Creates a landmark that can be teleported to from the UI list, or is one of the random starting positions for the scene . mosquitto_pub -h arenaxr.org -t realm/s/public/example/cube_1 -m '{\"object_id\" \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 1, \"y\": 1, \"z\": -1}, \"landmark\": { \"label\": \"Cube 1\", \"randomRadiusMin\": 1, \"randomRadiusMax\": 2, \"lookAtLandmark\": true }}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#landmark",
    "relUrl": "/content/messaging/examples.html#landmark"
  },"177": {
    "doc": "Examples",
    "title": "Particles",
    "content": "Particles are based on aframe-spe-particles-component, javascript loaded from aframe-spe-particles-component.min.js. For now, it’s not directly supported, but rather by passing JSON inside the data{} element. The syntax for parameter names has been updated so instead of a name like this that is space-separated it becomes spaceSeparated (camel case). Three examples here have been created starting with the examples in aframe-spe-particles-component examples then reformulating to ARENA JSON syntax. mosquitto_pub -h arenaxr.org -t realm/s/public/example/smoke -m '{\"object_id\": \"smoke\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 0, \"y\": 1, \"z\": -3.9}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 0.01, \"y\": 0.01, \"z\": 0.01}, \"color\": \"#ffffff\", \"spe-particles\": {\"texture\": \"textures/fog.png\", \"velocity\": \"1 30 0\", \"velocitySpread\": \"2 1 0.2\", \"particleCount\": 50, \"maxAge\": 4, \"size\": \"3, 8\", \"opacity\": \"0, 1, 0\", \"color\": \"#aaa, #222\"}}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/flames -m '{\"object_id\": \"flames\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 0, \"y\": 1, \"z\": -3.8}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 0.01, \"y\": 0.01, \"z\": 0.01}, \"color\": \"#ffffff\", \"spe-particles\": {\"texture\": \"textures/explosion_sheet.png\", \"textureFrames\": \"5 5\", \"velocity\": \"4 100 0\", \"acceleration\": \"0 10 0\", \"accelerationSpread\": \"0 10 0\", \"velocitySpread\": \"4 0 4\", \"particleCount\": 15, \"maxAge\": 1, \"size\": \"4, 8\", \"sizeSpread\": 2, \"opacity\": \"1, 0\", \"wiggle\": \"0 1 0\", \"blending\": \"additive\"}}}' mosquitto_pub -h arenaxr.org -t realm/s/public/example/sparks -m '{\"object_id\": \"sparks\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"cube\", \"position\": {\"x\": 0, \"y\": 1, \"z\": -4}, \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1}, \"scale\": {\"x\": 0.01, \"y\": 0.01, \"z\": 0.01}, \"color\": \"#ffffff\", \"spe-particles\": {\"texture\": \"textures/square.png\", \"color\": \"yellow, red\", \"particleCount\": 3, \"maxAge\": 0.5, \"maxAgeSpread\": 1, \"velocity\": \"40 200 40\", \"velocitySpread\": \"10 3 10\", \"wiggle\": \"50 0 50\", \"wiggleSpread\": \"15 0 15\", \"emitterScale\": 8, \"sizeSpread\": 10, \"randomizeVelocity\": true}}}' . Particles are very complicated and take a lot of parameters. It would not make sense to translate all of them into explicit ARENA types, thus this flexible ‘raw JSON’ format is used. ",
    "url": "https://arena.conix.io/content/messaging/examples.html#particles",
    "relUrl": "/content/messaging/examples.html#particles"
  },"178": {
    "doc": "Examples",
    "title": "Events",
    "content": "Click events are generated as part of the laser-controls A-Frame entity; you get the events if you click the lasers on scene entities that have click-listener Component in their HTML declaration (see index.html), or have later had click-listener enabled via an MQTT message (see above). Mouse events occur if you click in a browser, or tap on a touchscreen as well. | mouseenter | mouseleave | mousedown | mouseup | triggerdown / triggerup for left and right hand controllers | . The MQTT topic name for viewing these events can be the standard prefix (e.g. realm/s/public/example/) concatenated with a string made up of object ID that generated the event. An example event MQTT: . mosquitto_pub -h arenaxr.org -t realm/s/public/example/fallBox2 '{\"object_id\": \"fallBox2\", \"action\": \"clientEvent\", \"type\": \"mousedown\", \"data\": {\"position\": {\"x\": -0.993, \"y\": 0.342, \"z\": -1.797}, \"source\": \"camera_8715_er\"}}' . Note . The message itself will contain the originator of the event as a camera/user ID and other data like where the object was clicked. Full list of Vive controller event names: . | triggerdown | triggerup | gripdown | gripup | menudown | menuup | systemdown | systemup | trackpaddown | trackpadup | . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#events-1",
    "relUrl": "/content/messaging/examples.html#events-1"
  },"179": {
    "doc": "Examples",
    "title": "Scene Settings",
    "content": "Some settings are available by setting attributes of the Scene element (see A-Frame Scene) for example, turn on statistics: . mosquitto_pub -h arenaxr.org -t realm/s/public/example -m '{\"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"stats\": true}}' . Customize the fog (notice 3 character hexadecimal color representation): . mosquitto_pub -h arenaxr.org -t realm/s/public/example -m '{\"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"fog\": {\"type\": \"linear\", \"color\": \"#F00\"}}}' . Remove the “enter VR” icon: . mosquitto_pub -h arenaxr.org -t realm/s/public/example -m '{\"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"vr-mode-ui\": {\"enabled\": false}}}' . ",
    "url": "https://arena.conix.io/content/messaging/examples.html#scene-settings",
    "relUrl": "/content/messaging/examples.html#scene-settings"
  },"180": {
    "doc": "Examples",
    "title": "Examples",
    "content": " ",
    "url": "https://arena.conix.io/content/messaging/examples.html",
    "relUrl": "/content/messaging/examples.html"
  },"181": {
    "doc": "File Store",
    "title": "ARENA File Store",
    "content": "Coming Soon . Writing in progress… . To add models or programs to the ARENA, they will have to be stored somewhere. The file store is where most of these files are currently located, and can easily be accessed. ",
    "url": "https://arena.conix.io/content/tools/filestore.html#arena-file-store",
    "relUrl": "/content/tools/filestore.html#arena-file-store"
  },"182": {
    "doc": "File Store",
    "title": "Uploading Models",
    "content": "After logging into the ARENA file store, there will be options to create a new folder or file on the left of the screen. You can upload entire folders or files, either by clicking the “upload” button on the top right, or dragging them to the page. Most of the 3D models are stored in the folder “models”. To add a 3D model, make sure that it is in *.GLB/*.GLTF format, and upload the models. If it is a GLTF in a folder with multiple files, make sure to upload all of it. Keep this in mind when adding the object to a scene, as you will have to specify the GLTF file name within the folder (but not the textures or other components). ",
    "url": "https://arena.conix.io/content/tools/filestore.html#uploading-models",
    "relUrl": "/content/tools/filestore.html#uploading-models"
  },"183": {
    "doc": "File Store",
    "title": "Uploading Programs",
    "content": "To upload a Python or WASM program to the ARENA, follow the same steps as uploading at 3D model. Either create a new file/folder, or upload the files/folders with the programs. ",
    "url": "https://arena.conix.io/content/tools/filestore.html#uploading-programs",
    "relUrl": "/content/tools/filestore.html#uploading-programs"
  },"184": {
    "doc": "File Store",
    "title": "Additional Notes",
    "content": "Keep in mind the locations of your files, as you will need to know them when trying to add them to the ARENA using the build page. ",
    "url": "https://arena.conix.io/content/tools/filestore.html#additional-notes",
    "relUrl": "/content/tools/filestore.html#additional-notes"
  },"185": {
    "doc": "File Store",
    "title": "File Store",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/filestore.html",
    "relUrl": "/content/tools/filestore.html"
  },"186": {
    "doc": "GLTF Files",
    "title": "GLTF Files",
    "content": "Here are some notes to help you convert GLTF models used in the ARENA. ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html",
    "relUrl": "/content/3d-content/gltf-files.html"
  },"187": {
    "doc": "GLTF Files",
    "title": "Sketchfab",
    "content": "Sketchfab GLTF models don’t always come in convenient single .glb files. Sometimes they consist of a main .gltf file that refers to several textures and other files in a textures/ folder and .glb file. And to make matters worse, the default name is scene.gltf. But if you put everything from the download into a folder of it’s own, you can keep it separate from other scene.gltf files, and they will find the right files through relative paths. For example . ls /var/www/html/models/nara scene.bin scene.gltf textures . ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#sketchfab",
    "relUrl": "/content/3d-content/gltf-files.html#sketchfab"
  },"188": {
    "doc": "GLTF Files",
    "title": "SketchUp",
    "content": "Getting from SketchUp to GLTF is a bit of an adventure: . | The online converters don’t generate valid GLTFs. | The SketchUp GLTF export plugin was written for SketchUp 2016 and seems to hang SketchUp 2020 — these models were created in SketchUp 2017, so the 2016 version refuses to open them. | What worked was installing Adobe Dimension, opening the SketchUp file there, and exporting it. | . Dimension doesn’t seem to edit these models well, so if you want to patch up some textures, it’s recommended to do that in SketchUp first, then saving a copy, using Dimension to convert to GLTF. ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#sketchup",
    "relUrl": "/content/3d-content/gltf-files.html#sketchup"
  },"189": {
    "doc": "GLTF Files",
    "title": "Adobe Dimension",
    "content": "For Adobe Dimension, the general conversion steps are: . | Open a new file in Dimension | Import the file | Double click the Google Earth terrain in the view | Select terrain in the scene hierarchy, delete it | Select the top level folder in the scene for the model | File&gt;Export the file to glb | . ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#adobe-dimension",
    "relUrl": "/content/3d-content/gltf-files.html#adobe-dimension"
  },"190": {
    "doc": "GLTF Files",
    "title": "GLTF Viewer",
    "content": "Drag-and-drop preview tool for glTF 2.0 3D models: https://gltf-viewer.donmccurdy.com/. ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#gltf-viewer",
    "relUrl": "/content/3d-content/gltf-files.html#gltf-viewer"
  },"191": {
    "doc": "GLTF Files",
    "title": "GLTF Attribution",
    "content": "ARENA automatically collects GLTF model metadata to be displayed in the scene credits, accessible from Settings-&gt;Scene Credits. Checkout the credits for a scene created with these Spinosaurus and Jurassic Park Gate models: . | | . Important . Please make sure your GLTF files contain metadata to credit authors as explained below. Attribution Metadata . The ARENA looks for authorship metadata in the format used by Sketchfab, and models downloaded from Sketchfab will have such metadata. For example: . \"asset\": { \"extras\": { \"author\": \"Vaptor-Studio (https://sketchfab.com/VapTor)\", \"license\": \"CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\", \"source\": \"https://sketchfab.com/models/2135501583704537907645bf723685e7\", \"title\": \"Spinosaurus\" }, \"generator\": \"Sketchfab-5.74.0\", \"version\": \"2.0\" } . You can always use a text editor to open your GLTF file and search/add the above metadata. It must be inside the asset mandatory property. If creating models in Blender, you can add this metadata as Scene custom properties: . When exporting the GLTF model in Blender (File-&gt;Export), check ‘Custom Properties’ in the data to include in the export: . Metadata exported from blender will be included in the GLTF file in the scene.extras property. Don’t worry; ARENA will look for its existence and use it. ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#gltf-attribution",
    "relUrl": "/content/3d-content/gltf-files.html#gltf-attribution"
  },"192": {
    "doc": "GLTF Files",
    "title": "Chronos GLTF sample models",
    "content": "The Chronos GLTF sample models are available on the ARENA main (andrew.andrew.cmu.edu) server, accessible from the store/models/&lt;model-filename.glb&gt; path: . | 2CylinderEngine.glb | Cameras.gltf | MultiUVTest.glb | TriangleWithoutIndices.gltf | hat2.glb |   | . | 2CylinderEngine.gltf | CesiumMan.glb | MultiUVTest.gltf | TwoSidedPlane.gltf | helios |   | . | AlphaBlendModeTest.glb | CesiumMan.gltf | NormalTangentMirrorTest.glb | UnlitTest.glb | hololens.glb |   | . | AlphaBlendModeTest.gltf | CesiumMilkTruck.glb | NormalTangentMirrorTest.gltf | UnlitTest.gltf | izzy |   | . | AnimatedCube.gltf | CesiumMilkTruck.gltf | NormalTangentTest.glb | VC.glb | marcus2.glb |   | . | AnimatedMorphCube.glb | Corset.glb | NormalTangentTest.gltf | VC.gltf | marcus3.glb |   | . | AnimatedMorphCube.gltf | Corset.gltf | OrientationTest.glb | VertexColorTest.glb | monkey |   | . | AnimatedMorphSphere.glb | Court.glb | OrientationTest.gltf | VertexColorTest.gltf | nara |   | . | AnimatedMorphSphere.gltf | Cube.gltf | Plane.mtl | WaterBottle.glb | nuno.glb |   | . | AnimatedTriangle.gltf | Cube.mtl | Plane.obj | WaterBottle.gltf | palm |   | . | AntiqueCamera.glb | Cube.obj | ReciprocatingSaw.glb | anthony.glb | peacock |   | . | AntiqueCamera.gltf | DamagedHelmet.glb | ReciprocatingSaw.gltf | avocadoman | rearbody.mtl |   | . | Avocado.glb | DamagedHelmet.gltf | RiggedFigure.glb | baby_yoda | rearbody.obj |   | . | Avocado.gltf | Drone.glb | RiggedFigure.gltf | body.mtl | rhetoritician |   | . | BarramundiFish.glb | Duck.glb | RiggedSimple.glb | body.obj | scene.bin |   | . | BarramundiFish.gltf | Duck.gltf | RiggedSimple.gltf | cat | skull |   | . | BoomBox.glb | Earth.glb | Scene.bin | chicken | sphere_clicktest.gltf |   | . | BoomBox.gltf | EnvironmentTest.gltf | SciFiHelmet.gltf | chickenmove | tail.mtl |   | . | BoomBoxWithAxes.gltf | Flags.glb | Shuttle.glb | cow | tail.obj |   | . | Box.glb | FlightHelmet.gltf | SimpleMeshes.gltf | cow2 | throne |   | . | Box.gltf | GearboxAssy.glb | SimpleMorph.gltf | crown | tiles.mtl |   | . | BoxAnimated.glb | GearboxAssy.gltf | SimpleSparseAccessor.gltf | cybertruck | tiles.obj |   | . | BoxAnimated.gltf | Head.gltf | SmilingFace.glb | drone-small.glb | toni.glb |   | . | BoxInterleaved.glb | Head2.glb | Snoop.glb | drone.gltf | tri_prism.glb |   | . | BoxInterleaved.gltf | InterpolationTest.glb | SpecGlossVsMetalRough.glb | enginside.mtl | valve_index_left.gltf |   | . | BoxTextured.glb | InterpolationTest.gltf | SpecGlossVsMetalRough.gltf | enginside.obj | valve_index_right.gltf |   | . | BoxTextured.gltf | Lantern.glb | Sponza.gltf | engmount.mtl | vr_controller_vive.mtl |   | . | BoxTexturedNonPowerOfTwo.glb | Lantern.gltf | Stringlights.glb | engmount.obj | vr_controller_vive.obj |   | . | BoxTexturedNonPowerOfTwo.gltf | MetalRoughSpheres.glb | Suzanne.gltf | engout.mtl | windows.mtl |   | . | BoxVertexColors.glb | MetalRoughSpheres.gltf | TextureCoordinateTest.glb | engout.obj | windows.obj |   | . | BoxVertexColors.gltf | Monster.glb | TextureCoordinateTest.gltf | engrim.mtl | wings.mtl |   | . | BrainStem.glb | Monster.gltf | TextureSettingsTest.glb | engrim.obj | wings.obj |   | . | BrainStem.gltf | Moon.glb | TextureSettingsTest.gltf | er1k.glb |   |   | . | Buggy.glb | MorphPrimitivesTest.glb | TextureTransformTest.gltf | frog |   |   | . | Buggy.gltf | MorphPrimitivesTest.gltf | Triangle.gltf | goose |   |   | . ",
    "url": "https://arena.conix.io/content/3d-content/gltf-files.html#chronos-gltf-sample-models",
    "relUrl": "/content/3d-content/gltf-files.html#chronos-gltf-sample-models"
  },"193": {
    "doc": "3D Content",
    "title": "Generating 3D Content Overview",
    "content": ". | ARENA-Animation repository | . This details the process of creating a simple animated 3D model in Blender, and then animating it on a click event in the CONIX ARENA. It uses MQTT as a primary way of initializing and communicating with the ARENA. ",
    "url": "https://arena.conix.io/content/3d-content/#generating-3d-content-overview",
    "relUrl": "/content/3d-content/#generating-3d-content-overview"
  },"194": {
    "doc": "3D Content",
    "title": "Getting Started With Modeling",
    "content": "For this, Blender is used, as it is free and versatile. However, any other 3D modeling &amp; animation software will work, as long as the file is exported to a *.glb or *.gltf format. Blender can be downloaded here. Install Blender according to the instructions for your OS. Here, we are using Blender 2.80 on Ubuntu 18.04.4. ",
    "url": "https://arena.conix.io/content/3d-content/#getting-started-with-modeling",
    "relUrl": "/content/3d-content/#getting-started-with-modeling"
  },"195": {
    "doc": "3D Content",
    "title": "Starting Blender",
    "content": "When you open Blender, choose a General new file. Your screen should open to the Layout tab, with a grey cube in the center of the scene. You’ll have a camera, cube, and light in the top right Scene Collection window. Creating New Models . For this tutorial, we will be using two shapes. In this case, we will be using a cube and a sphere. At the top of the screen to the left, click Add &gt; Mesh &gt; UV Sphere. This will add a sphere to the origin of the scene. Use the Move tool to move the sphere from the center to the starting position of your choice. Changing colors . In the bottom right Context menu, there is a line of tabs down the side. To change the color of the rendered object, you can edit the Base Color and Subsurface Color in the Material tab. This will not show up in your Blender window, however it will be in the complete render when it’s exported. To change how it appears in the scene, scroll down to Viewport Display in the Material tab. To change the color of a sphere or new mesh created, there are a few additional steps. If you select the sphere in the Scene Collection menu and go to the Material tab of the Context menu, you will notice there are no presets or settings to change, unlike the already-generated cube. Create a new material, name it whatever you want, and you can change the colors, materials, and display. Starting Animation . At the top of the window, change from the Layout tab to the Animation tab. This window will look different, with a preview on the left, scene in the middle, and a timeline at the bottom. Right click on the cube, select ‘Insert Keyframe’, and select ‘Location’. In Blender, a keyframe is a specific frame in the timeline that contains the attributes of models, such as their location, rotation, or size. You can read more about Blender keyframes here. Add a Location Keyframe to the sphere, as well. This tutorial will only cover the basics of animating location movements, however rotation and scale work similarly. In the animation window at the bottom of the timeline, click on the numbers to switch frames. When moving objects, use the Move tool, or change the coordinates in the Context menu. Select the diamond next to each location coordinate in the Context menu in each frame that moves to save the change. Each model moves separately, but they do not have to move every frame. For simple animations, moving something every 5-10 frames is fine. The movements we set are at random, and they loop back to their original position. Switch back to the layout tab along the top. Here you can play back the animation, as well as adjust how long the animation is. We changed it from 250 to 100 frames, as we do not have 250 frames of content, and there would just be a long pause at the end of the animation. Saving the Animation . To save the animation, go to the menu at the top left of the window. Select File &gt; Export &gt; glTF 2.0 (.glb/.gltf). In the bottom left menu, select how you want to export the file. *.glb, *.gltf, and separate *.gltf are valid options. If using the separate *.gltf, make sure to upload the entire folder later. In this case, we are exporting it as a single *.gltf. Testing the Animation . This website will display animated glTF files. ",
    "url": "https://arena.conix.io/content/3d-content/#starting-blender",
    "relUrl": "/content/3d-content/#starting-blender"
  },"196": {
    "doc": "3D Content",
    "title": "3D Content",
    "content": " ",
    "url": "https://arena.conix.io/content/3d-content/",
    "relUrl": "/content/3d-content/"
  },"197": {
    "doc": "Users & Security",
    "title": "ARENA Users and Security",
    "content": "There are 2 basic methods of accessing the ARENA: Authenticated and Anonymous. Anonymous users are only allowed to participate in 3d video conferencing as observers of the ARENA. Authenticated users however, also have the opportunity to create and edit ARENA 3d scenes and run programs in the ARENA. | Collaborate: Join other users in a video conference. | Create: Use your authenticated account to build something amazing! | Control: Review our current security model. | . ",
    "url": "https://arena.conix.io/content/user-security/#arena-users-and-security",
    "relUrl": "/content/user-security/#arena-users-and-security"
  },"198": {
    "doc": "Users & Security",
    "title": "Users & Security",
    "content": " ",
    "url": "https://arena.conix.io/content/user-security/",
    "relUrl": "/content/user-security/"
  },"199": {
    "doc": "ARENA Runtime Supervisor",
    "title": "ARENA Runtime Supervisor (ARTS) Overview",
    "content": "By leveraging a common runtime and carefully integrated resource monitoring, the ARENA Runtime Supervisor (ARTS) can handle very heterogenous compute resources, across compute classes, from small embedded devices to edge servers. It is distinct from several previous frameworks for managing distributed computing in that it focus on adaptation to changing resources and support for highly heterogenous distributed systems found at the edge. ARTS is responsible for managing computational resources available in an ARENA realm (realms represent a geographically distinct set of resources; see Architecture). It uses WASM modules as a basic compute unit that can run in isolation in a distributed set of available runtimes, which run in, e.g., headsets, phones, laptops, embedded routers or edge servers. Runtimes register in ARTS their availability, resources. and system access APIs implemented. As applications are started in the ARENA (Figure 1), ARTS decides the best available compute resource(s) to run the application and monitors its execution do adapt to changing resource availability and consumption. This execution-time adaptation is a unique aspect of ARTS that leverages an important feature: live migration of WASM modules (see runtime). Figure 1. Starting a new Application in the ARENA . See the ARTS github. ",
    "url": "https://arena.conix.io/content/arts/#arena-runtime-supervisor-arts-overview",
    "relUrl": "/content/arts/#arena-runtime-supervisor-arts-overview"
  },"200": {
    "doc": "ARENA Runtime Supervisor",
    "title": "ARENA Runtime Supervisor",
    "content": " ",
    "url": "https://arena.conix.io/content/arts/",
    "relUrl": "/content/arts/"
  },"201": {
    "doc": "Python Library",
    "title": "Python Library Overview",
    "content": "Draw objects and run programs in the ARENA using Python! . | ARENA-py Python repository | . ",
    "url": "https://arena.conix.io/content/python/#python-library-overview",
    "relUrl": "/content/python/#python-library-overview"
  },"202": {
    "doc": "Python Library",
    "title": "Setup",
    "content": "Install package using pip: . pip3 install arena-py . ",
    "url": "https://arena.conix.io/content/python/#setup",
    "relUrl": "/content/python/#setup"
  },"203": {
    "doc": "Python Library",
    "title": "Hello ARENA",
    "content": "Run the hello.py example: . cd examples python hello.py . hello.py . from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_once def make_box(): scene.add_object(Box()) scene.run_tasks() . ",
    "url": "https://arena.conix.io/content/python/#hello-arena",
    "relUrl": "/content/python/#hello-arena"
  },"204": {
    "doc": "Python Library",
    "title": "ARENA-py Library",
    "content": "The above is the simplest example of an ARENA Python program. This library sits above the ARENA pub/sub MQTT message protocol: JSON messages described in more detail here which runs in a browser. That forms a layer, in turn, on top of A-Frame and THREE.js javascript libraries. ",
    "url": "https://arena.conix.io/content/python/#arena-py-library",
    "relUrl": "/content/python/#arena-py-library"
  },"205": {
    "doc": "Python Library",
    "title": "Examples",
    "content": "Examples of ARENA-py programs can be found here and here. ",
    "url": "https://arena.conix.io/content/python/#examples",
    "relUrl": "/content/python/#examples"
  },"206": {
    "doc": "Python Library",
    "title": "Running from the Command Line",
    "content": "The target of which server, user and scene are set by the Scene(host=\"...\",scene=\"...\",namespace=\"...\",debug=False) function call. It is also possible to override these using environmental variables at the command line as shown below. This allows a simple way to re-target applications for your own environment without having to change the parameters manually in the code. export MQTTH=arenaxr.org export REALM=realm export SCENE=scene export NAMESPACE=namespace python3 hello.py ... ===== Loading: https://arenaxr.org/namespace/scene, realm=realm Connecting to the ARENA... Connected! ===== ... If not specified the namespace is your current logged in user-id. The most common use-case is to simply update SCENE and MQTTH. ",
    "url": "https://arena.conix.io/content/python/#running-from-the-command-line",
    "relUrl": "/content/python/#running-from-the-command-line"
  },"207": {
    "doc": "Python Library",
    "title": "Authentication",
    "content": "We are adding protection to the ARENA MQTT broker, eventually to host an ACL list to limit access to change your scenes. As a first step, we are requiring Python programs to supply authentication through a Google account. Sign-In Desktop OS . If you have a web browser available, the ARENA-py library Scene(host=\"myhost.com\") will launch a web browser the first time and ask you for an account to authenticate you with, before opening a client MQTT connection. Sign-In Server/Headless OS . For headless environments, the ARENA-py library Scene(host=\"myhost.com\") will provide you with a url to cut and paste in a browser anywhere, ask you for an account to authenticate you with, and show you a code you can enter on the command line, before opening a client MQTT connection. Sign-Out . arena-py-signout . Show Permissions . arena-py-permissions . ",
    "url": "https://arena.conix.io/content/python/#authentication",
    "relUrl": "/content/python/#authentication"
  },"208": {
    "doc": "Python Library",
    "title": "Python Interactive Robot Demo",
    "content": " ",
    "url": "https://arena.conix.io/content/python/#python-interactive-robot-demo",
    "relUrl": "/content/python/#python-interactive-robot-demo"
  },"209": {
    "doc": "Python Library",
    "title": "Python Library",
    "content": " ",
    "url": "https://arena.conix.io/content/python/",
    "relUrl": "/content/python/"
  },"210": {
    "doc": "Messaging Format",
    "title": "Messaging Format Overview",
    "content": "Warning . The code examples below are currently out of date and are being updated… . Render 3d content in AFrame from MQTT messages . | ARENA-core webserver repository | . ",
    "url": "https://arena.conix.io/content/messaging/#messaging-format-overview",
    "relUrl": "/content/messaging/#messaging-format-overview"
  },"211": {
    "doc": "Messaging Format",
    "title": "General Purpose AFrame using Subtopics",
    "content": "Most of ARENA’s MQTT messages take JSON data where x,y,z (location in meters), x,y,z,w (rotation in quaternions), x,y,z (scale factor where 1=100%). If you leave out any of these, defaults will be used: location(0,0,0), rotation(0,0,0,1), scale(1,1,1), color(white). Another general setting is whether or not to persist an object to the ARENA scene database, determined by \"persist\": true. ",
    "url": "https://arena.conix.io/content/messaging/#general-purpose-aframe-using-subtopics",
    "relUrl": "/content/messaging/#general-purpose-aframe-using-subtopics"
  },"212": {
    "doc": "Messaging Format",
    "title": "Sample scene: Earth and Moon with Markers",
    "content": "MQTT messages that define the scene: . Create models . mosquitto_pub -h arenaxr.org -t realm/s/example/gltf-model_Earth -m '{\"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"gltf-model\", \"position\": {\"x\":0, \"y\": 0.1, \"z\": 0}, \"url\": \"store/models/Earth.glb\", \"scale\": {\"x\": 5, \"y\": 5, \"z\": 5}}}' mosquitto_pub -h arenaxr.org -t realm/s/example/gltf-model_Moon -m '{\"object_id\": \"gltf-model_Moon\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"parent\": \"gltf-model_Earth\", \"object_type\": \"gltf-model\", \"position\": {\"x\":0, \"y\": 0.05, \"z\": 0.6}, \"scale\": {\"x\":0.05, \"y\": 0.05, \"z\": 0.05}, \"url\": \"store/models/Moon.glb\" }}' . Define animation and movement . mosquitto_pub -h arenaxr.org -t realm/s/example/gltf-model_Earth -m '{\"object_id\" : \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 20000, \"easing\": \"linear\"}} }' mosquitto_pub -h arenaxr.org -t realm/s/example/gltf-model_Earth -m '{\"object_id\" : \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"startEvents\": \"click\", \"property\": \"scale\", \"dur\": 1000, \"from\": \"10 10 10\", \"to\": \"5 5 5\", \"easing\": \"easeInOutCirc\", \"loop\": 5, \"dir\": \"alternate\"} }' . Add a click-listener . mosquitto_pub -h arenaxr.org -t realm/s/example/gltf-model_Earth -m '{\"object_id\" : \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": {\"click-listener\": \"\"}}' . Create marker objects . mosquitto_pub -h arenaxr.org -t realm/s/example/box0 -m '{\"object_id\" : \"box0\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"blue\", \"object_type\": \"cube\", \"scale\": {\"x\": 0.2, \"y\": 0.2, \"z\": 0.2}, \"position\": {\"x\": 0, \"y\": 0, \"z\": 0} }}' mosquitto_pub -h arenaxr.org -t realm/s/example/box1 -m '{\"object_id\" : \"box1\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"red\", \"object_type\": \"cube\", \"scale\": {\"x\": 0.2, \"y\": 0.2, \"z\": 0.2}, \"position\": {\"x\": -0.7, \"y\": 1.67, \"z\": 2.11} }}' mosquitto_pub -h arenaxr.org -t realm/s/example/box2 -m '{\"object_id\" : \"box2\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"red\", \"object_type\": \"cube\", \"scale\": {\"x\": 0.2, \"y\": 0.2, \"z\": 0.2}, \"position\": {\"x\": -2.88, \"y\": 2.80, \"z\": -2.12} }}' mosquitto_pub -h arenaxr.org -t realm/s/example/box3 -m '{\"object_id\" : \"box3\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"red\", \"object_type\": \"cube\", \"scale\": {\"x\": 0.2, \"y\": 0.2, \"z\": 0.2}, \"position\": {\"x\": -0.09, \"y\": 1.30, \"z\": -3.66} }}' mosquitto_pub -h arenaxr.org -t realm/s/example/box4 -m '{\"object_id\" : \"box4\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"color\": \"red\", \"object_type\": \"cube\", \"scale\": {\"x\": 0.2, \"y\": 0.2, \"z\": 0.2}, \"position\": {\"x\": 3.31, \"y\": 2.00, \"z\": -0.97} }}' . Results . TODO . Include awesome demo result from design doc. ",
    "url": "https://arena.conix.io/content/messaging/#sample-scene-earth-and-moon-with-markers",
    "relUrl": "/content/messaging/#sample-scene-earth-and-moon-with-markers"
  },"213": {
    "doc": "Messaging Format",
    "title": "Messaging Format",
    "content": " ",
    "url": "https://arena.conix.io/content/messaging/",
    "relUrl": "/content/messaging/"
  },"214": {
    "doc": "Localization & Tracking",
    "title": "Localization and Tracking Overview",
    "content": " ",
    "url": "https://arena.conix.io/content/localization/#localization-and-tracking-overview",
    "relUrl": "/content/localization/#localization-and-tracking-overview"
  },"215": {
    "doc": "Localization & Tracking",
    "title": "Coordinate Space",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/localization/#coordinate-space",
    "relUrl": "/content/localization/#coordinate-space"
  },"216": {
    "doc": "Localization & Tracking",
    "title": "Localization & Tracking",
    "content": " ",
    "url": "https://arena.conix.io/content/localization/",
    "relUrl": "/content/localization/"
  },"217": {
    "doc": "Developers",
    "title": "Developer Overview",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/developer/#developer-overview",
    "relUrl": "/content/developer/#developer-overview"
  },"218": {
    "doc": "Developers",
    "title": "Developers",
    "content": " ",
    "url": "https://arena.conix.io/content/developer/",
    "relUrl": "/content/developer/"
  },"219": {
    "doc": "Overview",
    "title": "Background",
    "content": "Many have predicted the future of the Web to be the integration of Web content with the real-world through technologies such as augmented reality. This overlay of virtual content on top of the physical world, called the Spatial Web (in different contexts might be called AR Cloud, MetaVerse, Digital Twin), holds promise for dramatically changing the Internet as we see it today, and has broad application. However, building pervasive mixed (virtual and augmented) reality applications is challenging for several reasons. First, applications require global instant-on localization and anchoring to the physical world. Second, supporting interaction across multiple users and with physical entities leads to tight latency requirements. It is extremely noticeable when physical and virtual objects don’t correctly track each other. Third, support of content across platforms needs to span a wide range of compute and interaction capabilities. For example, click inputs look different on a tablet and an AR headset. Applications might need to be hosted on the cloud, at the edge or perhaps even in the end devices. Fourth, applications require access control to compute, sensor and actuator access in potentially untrusted environments. Finally, authoring and programming workflows need to adapt to real-world input and potentially interface with other Internet connected systems. The Augmented Reality Edge Networking Architecture (ARENA) was designed to address many of these challenges of building collaborative mixed reality applications. See a summary of the main features in the introduction. ",
    "url": "https://arena.conix.io/content/overview/#background",
    "relUrl": "/content/overview/#background"
  },"220": {
    "doc": "Overview",
    "title": "Main Concepts",
    "content": "Below is an overview of the ARENA architecture that we will describe. We will start by describing the types of devices considered in this architecture, and then explain the idea of an ARENA Realm, Scene, and the geographic content lookups made by ATLAS. Along the way, we will also try to understand the role of some important ARENA system services, such as the persistence service and ARTS. Edge Devices . We distinguish two main types of devices at the edge: (i) viewer devices and (ii) and other (headless) devices. All types of devices in an ARENA realm execute a WebAssembly (WASM) common runtime. Viewer devices leverage the browser infrastructure to run WASM programs, whereas other compute elements run a standalone WASM runtime. Our common runtime accepts requests to execute programs, provides sanboxed execution with access to (sanboxed) networked resources and manages the WASM programs lifetime (see Runtime Management (ARTS)). Viewer (Edge) devices . Devices with capability to display content to a user (phones, tablets, AR/VR headsets) are assumed to run a WebXR-capable browser that and runs a web application application-based stack as detailed below. This is an important aspect of our architecture to support very different platforms and interaction modalities. (Non-Viewer) Edge Devices . Non-viewer devices are devices with no display capabilities, but capable of runnning ARENA programs by supporting a common runtime. ARENA Realm . A Realm is a group of coordinating services including web servers for static content, an MQTT Publish-Subscribe (PubSub) messaging bus for real-time data distribution and a resource manager that can dispatch ARENA applications. The Realm defines a local instance of the ARENA along with any programs, devices or users that connect to the same PubSub bus. Realms (and scenes) are found through geographic lookups made to ATLAS. ARENA Scene . A Scene is an abstraction that contains a group of related virtual assets like 3D objects, configuration parameters, applications with shared end-points that allow users interactions. Scenes exist within a tree-like hierarchy, with configurable access control and are often attached to a physical location. Using a web analogy, the Realm is like a (local) web server and the Scene is like a particular web application. Scenes are loaded akin to web applications within a web browser with the capability to render the content and interact with location services. However, unlike most standard web browsers, it is possible to view a composition of multiple scenes simultaneously. For example, in a public space there might be multiple scenes that each contain various applications (and other users). A user might have access to one or more scenes in the same physical space that can be layered with an XR browser session. Since a Scene is the most basic unit of access control, this can be used to enable read and/or write to particular assets. Users are provided with access tokens that define their read and write access within the Scene structure. Scene Loading . It is important to distinguish how scenes are loaded and subsequently updated in real-time: . Once a user connects to a Realm and loads a particular Scene, a browser is given all of the 3D objects that are within the scene. This content is initially requested from a Persistence Data Store that tracks the latest state of any persistent objects (not all objects need to be persistent). Real-time Networked Updates . Once loaded, each of the 3D assets in a scene are then updated in real-time over the Realm’s local MQTT bus. For example, if an application changes the color of a cube, this would be captured in a message over the bus. When a user moves their camera or clicks on an object, these updates and events are also transmitted as messages. Each object in a Scene is managed by an end-point on the PubSub bus making them implicitly networked. This network transparency allows any number of applications and users running from different devices to all seamlessly interact within the 3D environment. Users can even see an avatar representation of other users in AR/VR since their camera pose is continuously published into a scene. ATLAS - Geographic Content Lookup . Scenes and Realms can be registered and discovered with a geographic database system called ATLAS. ATLAS operates in a hierarchical manner much like the Internet’s Domain Name Service (DNS), but using GPS coordinates and UUID markers instead of domain names. UUID markers can be embedded into QR codes, BLE beacons or other digital markers (WiFi, light anchors, etc). The ATLAS can also provide absolute and/or local coordinates for markers that are associated with scenes. For example, a user could scan a QR code or read a BLE beacon that provides a UUID that maps to a GPS coordinate along with any Scenes that contain that GPS coordinate. The ATLAS stores a GPS location for each Scene along with a 3D bounding polygon. The GPS location is typically assigned to the origin of the Scene’s local coordinate system. A user can then query the ATLAS for assets that fall within each Scene. For example, a Scene might contain a number of April Tags (low bit-density tracking markers) that have GPS coordinates as well as local coordinates referenced from the Scene’s origin that can be used for relocalization. ATLAS supports a mixture of Scene, GPS and UUID lookups to help find content. It is worth noting that a Scene’s address can be used to form a URL for virtual environments that have no physical location without the need for ATLAS. Runtime Management (ARTS) . Execution of applications in a Scene is managed by a local resource manager (ARTS) that is also part of the Realm. ARTS is responsible for dispatching, monitoring and migrating for execution of programs to available runtimes. In the future, we imagine ARTS will intelligently respond to available networking and compute resources, quality-of-service, and security policies. Currently, ARENA applications are compiled into WASM. WASM is an open standard that defines a portable binary-code format for executable programs similar to Assembly code, but currently supported by all major web browsers. WASM is gaining traction outside of the browser as a lightweight, safe and secure option for serverless style computing with applications that need to retain state. There are compilers for many languages that target WASM platforms including C, C++, Rust, Go and even Python interpreters. Within ARENA, we provide a WASM runtime hosted in any connected browser device that can support safely running arbitrary code launched from any other connected target. We have stand-alone runtimes for Linux-capable devices and can even dispatch Ahead-of-Time (AOT) compiled WASM to microcontrollers. ARENA applications can span cloud, edge and device platforms in a totally network transparent manner with support for live migration (i.e. context swap across devices). This provides a powerful basis for extremely agile programs that operate in the dynamic distributed computing contexts we imagine in the future Spatial Web. ",
    "url": "https://arena.conix.io/content/overview/#main-concepts",
    "relUrl": "/content/overview/#main-concepts"
  },"221": {
    "doc": "Overview",
    "title": "Next Steps",
    "content": "You can learn the basics of the interface and enter an ARENA scene. Also learn about building scenes, and how to develop python programs to define the behavior of your scenes. First Time in the ARENA Build a Scene Develop Python Programs . ",
    "url": "https://arena.conix.io/content/overview/#next-steps",
    "relUrl": "/content/overview/#next-steps"
  },"222": {
    "doc": "Overview",
    "title": "Overview",
    "content": " ",
    "url": "https://arena.conix.io/content/overview/",
    "relUrl": "/content/overview/"
  },"223": {
    "doc": "Architecture",
    "title": "Architecture Overview",
    "content": "Content viewed by users is composed of 3D scenes (ARENA Scenes) along with the code and other scene information, such as the local message bus server. The scenes are loaded akin to regular web applications within a web browser with the capability to render the content and interact with location services. All objects in the ARENA scene are implicitly networked via a message bus, which allows the scenes, code, and other sensors and services to interact. Figure 2. ARENA Design. Realms represent a geographically distinct set of resources. Each realm has its own set of ARENA services (web server, message bus, runtime manager). A directory service run by the ATLAS allows users to find the content at their location and supports linking this content with the physical world (by holding information about location beacons, such as light anchors). Execution of code in the scene is managed by a resource manager (ARTS) and can be dispatched for execution in an available WebAssembly runtime, according to available network and compute resources, quality of service, and security policies. We provide a WebAssembly runtime hosted in any ARENA browser device that can support safely running arbitrary code launched from any other connected target. Currently, we are also working on WebAssembly runtime support outside the browser in both Linux-capable devices and even less capable devices with microcontrollers. ",
    "url": "https://arena.conix.io/content/architecture/#architecture-overview",
    "relUrl": "/content/architecture/#architecture-overview"
  },"224": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": " ",
    "url": "https://arena.conix.io/content/architecture/",
    "relUrl": "/content/architecture/"
  },"225": {
    "doc": "The ARENA",
    "title": "Collaborative Mixed Reality Applications",
    "content": "ARENA: a multi-user and multi-application environment to simplify the development of mixed reality applications. The Augmented Reality Edge Network Architecture (ARENA) is a platform designed to allow interactions with and within the physical world, with locality and pervasive sensing as first-class citizens. ARENA makes it easy to create and host multiple applications that interact with users and other agents in an immersive 3D environment created inside a browser. | | . | Industrial digital twins | Wide-area tracking and localization | . | | . | VR telepresence | Outside-in tracking | . ",
    "url": "https://arena.conix.io/#collaborative-mixed-reality-applications",
    "relUrl": "/#collaborative-mixed-reality-applications"
  },"226": {
    "doc": "The ARENA",
    "title": "Key Features",
    "content": "ARENA simplifies a number of common development tasks for multi-user cross-platform mixed reality programming as follows. AR, VR, XR . Seamless support for a spectrum of experiences, from completely immersing the user in a digital world (Virtual Reality; VR) to enhancing the real world with interactive digital content (Augmented Reality; AR). A spectrum currently identified as miXed Reality (XR). Multi-platform . 3D applications that users can interact with from a number of platforms including tablets, phones, headsets and desktop browsers. Multiuser Experience . Users in the physical space can see the same 3D content anchored to the physical world in AR, and properties of all objects (and state of users) are networked to provide a consistent real-time view from any device or platform. Create and Host Applications . Runtime environment that can host any number of user programs on any network connected device. Security . Fine-grained access control allowing users to share and manage control over content, with user applications hosted by a sandboxed environment. Accurate relocalization . Built-in support for a number of different types of systems (such as UWB, OptiTrack, AprilTags). Geographic content lookup . Perform geographic queries for content, assets (such as location markers) and compute resources. ",
    "url": "https://arena.conix.io/#key-features",
    "relUrl": "/#key-features"
  },"227": {
    "doc": "The ARENA",
    "title": "Next Steps",
    "content": "Get started by following our ARENA Overview to learn the main concepts. ARENA Overview . Then, you can learn the basics of the interface and enter an ARENA scene. Also learn about building scenes, and how to develop python programs to define the behavior of your scenes. First Time in the ARENA Build a Scene Develop Python Programs . The navigation bar on the left side will take you to much more content about the ARENA, which you can browse. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. Icons made by Smashicons, Freepik from www.flaticon.com . ",
    "url": "https://arena.conix.io/#next-steps",
    "relUrl": "/#next-steps"
  },"228": {
    "doc": "The ARENA",
    "title": "The ARENA",
    "content": " ",
    "url": "https://arena.conix.io/",
    "relUrl": "/"
  },"229": {
    "doc": "Tools",
    "title": "Tools Overview",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/tools/#tools-overview",
    "relUrl": "/content/tools/#tools-overview"
  },"230": {
    "doc": "Tools",
    "title": "Monitor network connections",
    "content": "Take a minute to view the ARENA network’s connections as you move around in the ARENA on our Network graph. Clients connected (orange square), client subnets (gray box), MQTT topics (blue circle), and their current relationships and throughput (white arrow) can be visualized. Controls: . | Pause/Play: Stop or resume fetching graphs. | Forward/Back: Step forward one or step back one previously fetched graph. | Scroll: Zoom in and out of detail. | . ",
    "url": "https://arena.conix.io/content/tools/#monitor-network-connections",
    "relUrl": "/content/tools/#monitor-network-connections"
  },"231": {
    "doc": "Tools",
    "title": "Tools",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/",
    "relUrl": "/content/tools/"
  },"232": {
    "doc": "Localizer",
    "title": "Localizer",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/tools/localizer.html",
    "relUrl": "/content/tools/localizer.html"
  },"233": {
    "doc": "Navigation Meshes",
    "title": "Navigation Meshes",
    "content": "Navigation meshes are used to confine walking users along a surface. The surface must be a single mesh in global coordinate space contained within a GLTF file. Unlike other GLTF files, the navigation mesh can not be scaled, moved or rotated. The mesh must also have only positive Y-axis coordinates (does not go below the ground). In the current implementation, the starting position of the user must have a Y-coordinate that matches that corresponding (X-Z coordinate) of the mesh at the location. ",
    "url": "https://arena.conix.io/content/3d-content/mesh-nav.html",
    "relUrl": "/content/3d-content/mesh-nav.html"
  },"234": {
    "doc": "Navigation Meshes",
    "title": "Mesh Requirements",
    "content": ". | Single Mesh Geometry | Global Coordinate Space (apply all local coordinate transforms to flatten mesh) | Mesh Y-coordinate must match user starting position Y-coordinate at X-Z location | Mesh is often transparent (not required) | . ",
    "url": "https://arena.conix.io/content/3d-content/mesh-nav.html#mesh-requirements",
    "relUrl": "/content/3d-content/mesh-nav.html#mesh-requirements"
  },"235": {
    "doc": "Navigation Meshes",
    "title": "Blender Construction",
    "content": "These instructions will walk you through manually creating a navigation mesh. Tools and plugins exist that can help automatically generate navigation meshes for complex scenes. First, generate a new collection for your nav mesh and generate a plane for initial construction. ARENA has Y-axis up while Blender has Z-asis up. The plane is located at Z-axis (Y in arena) of 0. Edit the plane to model the surface which should confine users. It is often best to make the surface slightly smaller than the main model floor. Use a combination of the knife tool and surface extruding to create a 3D shape. Note that the user can only move up slanted inclines and will be blocked by any 90 degree step. Make sure to name the nav-mesh and vertex set the same thing (i.e. nav-mesh). Once the model is complete, convert it to global coordinates by pressing Ctrl-A and selecting “All Transforms”. Confirm that after applying all transforms, that the model is located at 0,0,0, has no rotation and has a scale of 1,1,1. Next apply a material (BSDF shader) and set the Alpha to 0 and select Blend Mode “Alpha Clip” if you wish to hide the nav mesh. Add the navigation mesh in the ARENA builder in the scene-options object as a URL to the file. ",
    "url": "https://arena.conix.io/content/3d-content/mesh-nav.html#blender-construction",
    "relUrl": "/content/3d-content/mesh-nav.html#blender-construction"
  },"236": {
    "doc": "Navigation Meshes",
    "title": "Navmesh snapping via landmark teleports or starting positions",
    "content": "If a navigation mesh is properly created with the default origin in mind (0,0,0 coordinates), a user will load in to that starting position already constrained to the navmesh. If there is a vertical offset, however, then the navigation constraint may not apply unless specified with a starting position landmark. With a landmark property constrainToNavMesh set, a teleport to landmark or starting random position can forcibly snap a user to the nearest position on the navigation mesh. ",
    "url": "https://arena.conix.io/content/3d-content/mesh-nav.html#navmesh-snapping-via-landmark-teleports-or-starting-positions",
    "relUrl": "/content/3d-content/mesh-nav.html#navmesh-snapping-via-landmark-teleports-or-starting-positions"
  },"237": {
    "doc": "MQTT Broker",
    "title": "MQTT Broker",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/arts/mqtt-broker.html",
    "relUrl": "/content/arts/mqtt-broker.html"
  },"238": {
    "doc": "Next Steps",
    "title": "Next Steps",
    "content": "This was a quick overview of the ARENA. The navigation bar on the left side will take you to much more content about the ARENA, which you can browse. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. ",
    "url": "https://arena.conix.io/content/overview/next.html",
    "relUrl": "/content/overview/next.html"
  },"239": {
    "doc": "Objects",
    "title": "Objects in ARENA-py",
    "content": "Objects are the main interface for placing content into the ARENA. See messaging. ",
    "url": "https://arena.conix.io/content/python/objects.html#objects-in-arena-py",
    "relUrl": "/content/python/objects.html#objects-in-arena-py"
  },"240": {
    "doc": "Objects",
    "title": "Creating an Object and Adding Attributes",
    "content": "See Appendix for all types of Objects. Attributes can be added upon Object creation in the three ways used below (special attributes like position, rotation, scale, color, etc. can be added with tuples, lists, or dictionaries). box = Box( object_id=\"my_box\", position=Position(0,4,-2), rotation=(0,0,0,1), scale={\"x\":2,\"y\":2,\"z\":2} ) # objects can be added to a scene with the add_object method scene.add_object(box) . ",
    "url": "https://arena.conix.io/content/python/objects.html#creating-an-object-and-adding-attributes",
    "relUrl": "/content/python/objects.html#creating-an-object-and-adding-attributes"
  },"241": {
    "doc": "Objects",
    "title": "Adding Attributes",
    "content": "# use update_attributes with kwargs to add attributes box.update_attributes(physics=Physics(type=\"dynamic\")) # shorthand way: box.data.physics = Physics(type=\"dynamic\") # don't forget to call scene.update_object to see your chnages in the ARENA! scene.update_object(box) . ",
    "url": "https://arena.conix.io/content/python/objects.html#adding-attributes",
    "relUrl": "/content/python/objects.html#adding-attributes"
  },"242": {
    "doc": "Objects",
    "title": "Updating Attributes",
    "content": "Most attributes (except object_id, persist, ttl, and parent) are under the “data” field. Access these by using obj.data. box.data.position.x = 2 # box.update_attributes(position=Position(2,4,-2)) works too scene.update_object(box) . ",
    "url": "https://arena.conix.io/content/python/objects.html#updating-attributes",
    "relUrl": "/content/python/objects.html#updating-attributes"
  },"243": {
    "doc": "Objects",
    "title": "Removing Object Attributes",
    "content": "obj.data.click_listener = None # or, obj.data.clickable = None # obj.update_attributes(click_listener=None) works too . ",
    "url": "https://arena.conix.io/content/python/objects.html#removing-object-attributes",
    "relUrl": "/content/python/objects.html#removing-object-attributes"
  },"244": {
    "doc": "Objects",
    "title": "Update Handler",
    "content": "The update_handler will be called whenever the object is updated by the library of by some external program . # [obj] is the Object that called the update handler def update(obj): print(obj) obj.update_handler = update # obj.update_attributes(update_handler=update) works too . ",
    "url": "https://arena.conix.io/content/python/objects.html#update-handler",
    "relUrl": "/content/python/objects.html#update-handler"
  },"245": {
    "doc": "Objects",
    "title": "Automatic Updates",
    "content": "ARENA-py will keep track of internal states of active objects in a scene, so the library user doesn’t have to. This means if you create an Object in a Scene, the Scene instance will listen to incoming messages and update your Object instance’s attributes automatically! . This allows ARENA-py programs to interact with the build page, with users, and even with other ARENA-py programs. As long as your program is running, you do not need to manually keep track of your Objects’ current state in the scene. For instance, if you create an Object in ARENA-py and you update its position with the build page or with another program, that Object’s position in the original ARENA-py program will automatically be updated for you! . ",
    "url": "https://arena.conix.io/content/python/objects.html#automatic-updates",
    "relUrl": "/content/python/objects.html#automatic-updates"
  },"246": {
    "doc": "Objects",
    "title": "All Objects",
    "content": " ",
    "url": "https://arena.conix.io/content/python/objects.html#all-objects",
    "relUrl": "/content/python/objects.html#all-objects"
  },"247": {
    "doc": "Objects",
    "title": "Box",
    "content": "Create a box: . Box(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#box",
    "relUrl": "/content/python/objects.html#box"
  },"248": {
    "doc": "Objects",
    "title": "Circle",
    "content": "Create a flat circle: . Circle(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#circle",
    "relUrl": "/content/python/objects.html#circle"
  },"249": {
    "doc": "Objects",
    "title": "Cone",
    "content": "Create a cone: . Cone(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#cone",
    "relUrl": "/content/python/objects.html#cone"
  },"250": {
    "doc": "Objects",
    "title": "Cylinder",
    "content": "Create a cylinder: . Cylinder(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#cylinder",
    "relUrl": "/content/python/objects.html#cylinder"
  },"251": {
    "doc": "Objects",
    "title": "Dodecahedron",
    "content": "Create a dodecahedron: . Dodecahedron(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#dodecahedron",
    "relUrl": "/content/python/objects.html#dodecahedron"
  },"252": {
    "doc": "Objects",
    "title": "GLTF",
    "content": "Create a gltf 3D model: . GLTF(url, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#gltf",
    "relUrl": "/content/python/objects.html#gltf"
  },"253": {
    "doc": "Objects",
    "title": "Icosahedron",
    "content": "Create an icosahedron: . Icosahedron(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#icosahedron",
    "relUrl": "/content/python/objects.html#icosahedron"
  },"254": {
    "doc": "Objects",
    "title": "Image",
    "content": "Create a flat image: . Image(url, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#image",
    "relUrl": "/content/python/objects.html#image"
  },"255": {
    "doc": "Objects",
    "title": "Light",
    "content": "Create a light: . Light(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#light",
    "relUrl": "/content/python/objects.html#light"
  },"256": {
    "doc": "Objects",
    "title": "Line",
    "content": "Create a thin line: . Line(path, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#line",
    "relUrl": "/content/python/objects.html#line"
  },"257": {
    "doc": "Objects",
    "title": "Octahedron",
    "content": "Create an octahedron: . Octahedron(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#octahedron",
    "relUrl": "/content/python/objects.html#octahedron"
  },"258": {
    "doc": "Objects",
    "title": "Plane",
    "content": "Create a flat plane: . Plane(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#plane",
    "relUrl": "/content/python/objects.html#plane"
  },"259": {
    "doc": "Objects",
    "title": "Ring",
    "content": "Create a flat ring: . Ring(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#ring",
    "relUrl": "/content/python/objects.html#ring"
  },"260": {
    "doc": "Objects",
    "title": "Sphere",
    "content": "Create a sphere: . Sphere(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#sphere",
    "relUrl": "/content/python/objects.html#sphere"
  },"261": {
    "doc": "Objects",
    "title": "Tetrahedron",
    "content": "Create a tetrahedron: . Tetrahedron(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#tetrahedron",
    "relUrl": "/content/python/objects.html#tetrahedron"
  },"262": {
    "doc": "Objects",
    "title": "Text",
    "content": "Write 3D text: . Text(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#text",
    "relUrl": "/content/python/objects.html#text"
  },"263": {
    "doc": "Objects",
    "title": "ThickLine",
    "content": "Create a thickline: . ThickLine(path, lineWidth, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#thickline",
    "relUrl": "/content/python/objects.html#thickline"
  },"264": {
    "doc": "Objects",
    "title": "Torus",
    "content": "Create a torus: . Torus(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#torus",
    "relUrl": "/content/python/objects.html#torus"
  },"265": {
    "doc": "Objects",
    "title": "TorusKnot",
    "content": "Create a torus-knot: . TorusKnot(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#torusknot",
    "relUrl": "/content/python/objects.html#torusknot"
  },"266": {
    "doc": "Objects",
    "title": "Triangle",
    "content": "Create a flat triangle: . Triangle(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#triangle",
    "relUrl": "/content/python/objects.html#triangle"
  },"267": {
    "doc": "Objects",
    "title": "Particle",
    "content": "Add a particle effect (may be unsupported): . Particle(...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#particle",
    "relUrl": "/content/python/objects.html#particle"
  },"268": {
    "doc": "Objects",
    "title": "Camera",
    "content": "Camera(object_id, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#camera",
    "relUrl": "/content/python/objects.html#camera"
  },"269": {
    "doc": "Objects",
    "title": "Generic Object",
    "content": "For objects that might not exist yet (but may exist in AFRAME). Inherit from this class to create custom objects. Object(object_type, ...) . ",
    "url": "https://arena.conix.io/content/python/objects.html#generic-object",
    "relUrl": "/content/python/objects.html#generic-object"
  },"270": {
    "doc": "Objects",
    "title": "Objects",
    "content": " ",
    "url": "https://arena.conix.io/content/python/objects.html",
    "relUrl": "/content/python/objects.html"
  },"271": {
    "doc": "Optical Markers",
    "title": "Optical Markers",
    "content": "The ARENA can use Apriltags to relocalize the device. To perform relocalization, the ARENA solver must know the pose of the tag detected, and thus tags must be registered in ATLAS. The exception are tags with ID 0, which are assumed to mark the origin: 0, 0, 0 (x, y, z), which we detail next. Soon . Image clarifying coordinate system… . ",
    "url": "https://arena.conix.io/content/localization/optical-markers.html",
    "relUrl": "/content/localization/optical-markers.html"
  },"272": {
    "doc": "Optical Markers",
    "title": "Using AprilTag with ID 0 as a reference to the scene origin",
    "content": "We have a few requirements for the AprilTag relocalization to work. Please print an AprilTag with the correct ID (0) and size, and also make sure you are using an ARKit-capable device with XRViewer properly configured. We are working on support for other devices, including Android. We detail these requirements next. AprilTag size . Apriltags used for relocalization in the ARENA must have a well-known size as the ARENA pose solver assumes the tag size from tag ID, as shown in the table. | Tag ID Range | Tag Size (mm) | . | [0,150] | 150 | . | [151,300] | 100 | . | [301,450] | 50 | . | [451,586] | 20 | . You can find PDF files using the correct size in this repository. In particular, tag with ID 0 is here. We have seen cases where the tags were printed with inverted black/white or with the wrong size. Please make sure your tag 0 looks as follows and that the size on the printed page is correct (150x150mm). WebXRViewer . The AprilTag detection requires that the browser supports computer vision while in AR mode using WebXR. Currently, the only browser with such support is the experimental browser from Mozilla WebXRViewer. After installing WebXRViewer, go to ‘Settings -&gt; XRViewer’ and change: . WebXR Polyfill URL: https://arenaxr.org/webxrios.js or https://arenaxr.org/vendor/webxr-webxrviewer-ios.js . Always Allow World Sensing:Yes . Use the device in portrait orientation . The ARENA localization solver assumes that the device is in portrait orientation, and we recommend locking the device to portrait orientation. The picture below shows a scene with a blue box at the origin; while not visible, the blue box is overlayed on an AprilTag with ID 0. ",
    "url": "https://arena.conix.io/content/localization/optical-markers.html#using-apriltag-with-id-0-as-a-reference-to-the-scene-origin",
    "relUrl": "/content/localization/optical-markers.html#using-apriltag-with-id-0-as-a-reference-to-the-scene-origin"
  },"273": {
    "doc": "Opititrack",
    "title": "Opititrack",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/localization/optitrack.html",
    "relUrl": "/content/localization/optitrack.html"
  },"274": {
    "doc": "URL Parameters",
    "title": "URL Parameters",
    "content": "For advanced users, the ARENA accepts URL parameters to override some internal defaults. These are passed in the address bar, after the scene name, e.g.: https://arenaxr.org/public/scenename/?name=MyName&amp;scene=AScene . The following URL parameters are accepted. | Parameter | Description | . | ATLASurl (string) | URL of ATLAS (e.g. ATLASurl=//atlas.conix.io) | . | builder (bool) | AprilTag location solver parameter. Will localize origin tag from a networked solver (sets networkedTagSolver=true). All other tags found will be updated or created in the ATLAS (e.g builder=true) | . | camUpdateIntervalMs (string) | Minimum camera update interval in milliseconds (e.g. camUpdateIntervalMs=100) | . | cvRate (int) | AprilTag location solver parameter. Throttle rate between 1 and 60 of frame processing. DEPRECATED - cvRate will auto adjust based on avg speed (e.g cvRate=1) | . | fixedCamera (string) | Sets the camera name to the given value and enables VIO output to realm/vio/scene-name/camera-name ; fixedCamera=iPhone will set the camera name exactly to the given value (not add any prefix/suffix) | . | lat (float) | Override device location; (e.g. lat=40.4427) | . | long (float) | Override device location; (e.g. long=79.9430) | . | mqttHost (string) | Override MQTT host address (e.g. mqttHost=arenaxr.org) | . | name (string) | Set user name (e.g. name=MyName) | . | networkedTagSolver (bool) | AprilTag location solver parameter. When true, publishes tag detections (to realm/g/a/camera-name) and defers all tag solving of client camera to a solver sitting on pubsub | . | publishDetections (bool) | AprilTag location solver parameter. Ignored if networkedTagSolver=true. When true, publishes tag detections (to realm/g/a/camera-name); still processes the tag and relocalizes accordingly | . | scene (string) | Set scene name (e.g. scene=AScene) | . | startCoords (string) | User starting x, y, z coordinates in the 3D environment (e.g. startCoords=0,1.6,0) | . | skipav (bool) | Skips the webcam, speaker, microphone setup modal. Attempts to use previously selected devices, or system defaults | . | startLastPos (bool) | User starts at the last position recorded on this browser (saved per heartbeat in localStorage) | . | noname (bool) | Handles display of user name on the screen. False: (default) display the user name. True: Do not display the user name. | . | noreticle (bool) | In AR, changes the reticle ring to transparent when true, gray when false (default). | . | armode (bool) | Instantly enter AR mode. | . ",
    "url": "https://arena.conix.io/content/tools/params.html",
    "relUrl": "/content/tools/params.html"
  },"275": {
    "doc": "Persistence DB",
    "title": "ARENA Persistence Service",
    "content": "Listens on MQTT for ARENA objects to save to mongodb store. | ARENA-persist repository | . Persistence . Simply adding persist: true to the top level MQTT message for any create action and the object will be saved. A client then can make a HTTP request to the URL the server this service is running on to retrieve a list of initially loaded objects upon entering any scene. If an update message contains an explicit persist: false, then the data therein will not be saved in persistence. TTL . Adding a ttl (int seconds) to the top level MQTT message for any create action with persist:true signals that the object will be automatically deleted from persistence after set duration, as well as a corresponding delete action message sent over pubsub. Templates . Templates are special scenes that can be instantiated in entirety in another scenes. Templates are crafted in a scene name prefixed with the @ symbol, e.g. @myTemplate. The creation process is exactly same as any other scene with C(R)UD actions on pubsub, with exception that ttl values are not enforced. That is to say, the objects do not expire inside @template scenes, but rather activated upon instantiation. When a template is loaded, a parent container is first created in the target scene. This parent container follows the object ID naming scheme: templateId::instanceId, e.g. myTemplate::instance_0. Then every object inside the designated @template scene is replicated as descendants of the parent container. In this way, the parent can be repositioned, rotated, or scaled to adjust the template all at once. The objects within the template follow the naming scheme templateId::instanceId::objectId, e.g. myTemplate::instance_0::cube1. To load an instance of a template, send message to your desired target scene: . {\"action\":\"loadTemplate\",\"data\":{\"templateId\":\"myTemplate\",\"instanceId\":\"instance_0\"},\"object_id\":\"myClient\"} . The data object should also contain position, rotation, or scale directives if intended not to all default to 0 (or 1 for scale) values. You may also set a parent to attach the entire parent container to another existing object in the target scene. After the template load, all objects behave as typical in any scene. NOTES . If a template scene is empty with no objects, or an instance ID already exists within a target scene, the template load will fail silently. ",
    "url": "https://arena.conix.io/content/tools/persistence.html#arena-persistence-service",
    "relUrl": "/content/tools/persistence.html#arena-persistence-service"
  },"276": {
    "doc": "Persistence DB",
    "title": "Persistence DB",
    "content": " ",
    "url": "https://arena.conix.io/content/tools/persistence.html",
    "relUrl": "/content/tools/persistence.html"
  },"277": {
    "doc": "Cross Platform Support",
    "title": "Cross Platform Support",
    "content": "A core component of the ARENA is an environment to view and interact in virtual and augmented reality. This environment was built using Web standards (notably, WebXR and WebGL) and frameworks for building 3D scenes and AR/VR environments (three.js and A-Frame). This allows ARENA content to be view on a number of platforms ranging from standard web browsers on desktop computers and VR headsets (desktop browsers, FireFox Reality for VR headsets, Oculus Browser for VR headsets), on phones / tablets with passthrough AR (FireFox WebXR Viewer, Chrome) and wearable AR headsets (Hololens Edge Browser, Magic Leap Lumin Browser). All of these devices can interact in a multi-user manner with a consistent scene. In order to prototype the needs for future browser platforms, we are maintaining a custom WebXR version of Firefox for iOS that is able to perform local image processing as well as 3D click I/O events. We also plan to integrate the ARENA with systems developed to aid coordinating mobile teams (of first responders, firefighters, police) in real-time . Figure 3. ARENA Browser Stack . ",
    "url": "https://arena.conix.io/content/architecture/platforms.html",
    "relUrl": "/content/architecture/platforms.html"
  },"278": {
    "doc": "MQTT",
    "title": "MQTT PubSub Topic Tree",
    "content": "The ARENA’s MQTT topics are organized with a design toward security to create a list of permissable channels for users to publish and subscribe to. The topics are written into an ARENA JWT each user will request when launching an ARENA web client in a browser or an ARENA Python client application. A few example topics are included below for context, as well as a list of topic elements used, and which topics are added to the ARENA JWT based upon user and system defined access control list (ACL) settings. ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#mqtt-pubsub-topic-tree",
    "relUrl": "/content/architecture/pubsub.html#mqtt-pubsub-topic-tree"
  },"279": {
    "doc": "MQTT",
    "title": "Example Topics",
    "content": "General 3D Object realm/s/er1k/test-scene/box_1 User 3D Object realm/s/er1k/test-scene/camera_1234567890_er1k Chat Message realm/c/er1k/p/1234567890_er1k/MTIzNDU2Nzg5MF9lcjFr AprilTag Detection realm/g/a/camera_1234567890_er1k VIO Update realm/vio/er1k/test-scene/vio-12 Runtime Stdout realm/proc/debug/stdout/e5f4439e-5a02-4e5d-9d72-704d171d8949 ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#example-topics",
    "relUrl": "/content/architecture/pubsub.html#example-topics"
  },"280": {
    "doc": "MQTT",
    "title": "Topic Elements",
    "content": "a Storage area for AprilTag detection data c Storage area for user text chat messages g Storage area for general use o Storage area for public or open user payload topics s Storage area for scene graphic objects p Storage area for private user to user payload topics proc Storage area for runtime process and module data vio Storage area for VIO camera pose updates $NETWORK Storage area for network performance metrics {namespace} Namespace for a particular user within the scene {object-id} A-Frame object name; object topic should receive mostly A-Frame content {realm} Future use; a namespace we expect to be useful for peer MQTT brokers; probably geographic-based {process-id} Namespace for a particular application within the scene {session-id} A server-generated ID to establish a unique user connection {scene-id} Name of particular scene, could be captured from the ATLAS {userhandle} Appended to control origin of the chat messages: b64encode('{session-id}_{username}') {username} The ARENA account username for the user *Names in {} are dynamic . ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#topic-elements",
    "relUrl": "/content/architecture/pubsub.html#topic-elements"
  },"281": {
    "doc": "MQTT",
    "title": "Scene Allowed",
    "content": "{realm}/s/# . | All scenes: Staff/Admin have rights to all scene objects. | Subscribe: Staff | Publish: Staff | . {realm}/s/{username}/# . | Scene namespaces: scene owners have rights to their scene objects only. | Subscribe: specific user: username | Publish: specific user: username | . {realm}/s/{namespace}/{scene-id}/# . | Individual scenes: did the user set specific public read or public write? | Subscribe: public_read=True, or namespace user added editor | Publish: public_write=True, or namespace user added editor | . {realm}/s/{namespace}/{scene-id}/camera_{session-id}_{username}/# . {realm}/s/{namespace}/{scene-id}/viveRight_{session-id}_{username}/# . {realm}/s/{namespace}/{scene-id}/viveLeft_{session-id}_{username}/# . | User-presence objects: scene owners have rights to their scene objects only. | Subscribe: public_read=True | Publish: specific Anonymous/User, issued ID and username from authentication service. | . Note . Since anonymous usernames are not authenticated, there is a risk of spoofing their user-presence, and as such, all users are issued a session-id for their camera objects to prevent this. ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#scene-allowed",
    "relUrl": "/content/architecture/pubsub.html#scene-allowed"
  },"282": {
    "doc": "MQTT",
    "title": "Sensor Allowed",
    "content": "{realm}/g/a/# . | All AprilTag sensors | Subscribe: Staff, User, Anonymous | Publish: Staff, User, Anonymous | . {realm}/vio/{namespace}/{scene-id}/# . | VIO or test cameras for student experiments | Publish: Staff | . ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#sensor-allowed",
    "relUrl": "/content/architecture/pubsub.html#sensor-allowed"
  },"283": {
    "doc": "MQTT",
    "title": "Chat Allowed",
    "content": "A user handle is appended to control the origin of the chat messages in the topic and payload to prevent spoofing. Where userhandle = b64encode({session-id}\\_{username}). {realm}/c/{namespace}/p/{session-id}_{username}/# . | Receive private messages: Read | Subscribe: Staff, User, Anonymous | . {realm}/c/{namespace}/o/# . | Receive open messages to everyone and/or scene: Read | Subscribe: Staff, User, Anonymous | . {realm}/c/{namespace}/o/{userhandle} . | Send open messages (chat keep-alive, messages to all/scene: Write | Publish: Staff, User, Anonymous | . {realm}/c/{namespace}/p/+/{userhandle} . | Private messages to User: Write | Publish: Staff, User, Anonymous | . ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#chat-allowed",
    "relUrl": "/content/architecture/pubsub.html#chat-allowed"
  },"284": {
    "doc": "MQTT",
    "title": "Runtime Manager Allowed",
    "content": "{realm}/proc/# . | Open topic for controlling runtime processes | Subscribe: Staff, User, Anonymous | Publish: Staff, User, Anonymous | . ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#runtime-manager-allowed",
    "relUrl": "/content/architecture/pubsub.html#runtime-manager-allowed"
  },"285": {
    "doc": "MQTT",
    "title": "Network Metrics Allowed",
    "content": "$NETWORK . | Monitor topic for logging or visualizing metrics | Subscribe: Staff, User, Anonymous | . $NETWORK/latency . | Topic for writing network metrics | Publish: Staff, User, Anonymous | . ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html#network-metrics-allowed",
    "relUrl": "/content/architecture/pubsub.html#network-metrics-allowed"
  },"286": {
    "doc": "MQTT",
    "title": "MQTT",
    "content": " ",
    "url": "https://arena.conix.io/content/architecture/pubsub.html",
    "relUrl": "/content/architecture/pubsub.html"
  },"287": {
    "doc": "Program Launch Example",
    "title": "Scene Edit/Program Launch Example",
    "content": "Warning . This example needs to be updated for a new user. ",
    "url": "https://arena.conix.io/content/arts/python.html#scene-editprogram-launch-example",
    "relUrl": "/content/arts/python.html#scene-editprogram-launch-example"
  },"288": {
    "doc": "Program Launch Example",
    "title": "Quick Reference",
    "content": ". | Scene https://arenaxr.org/public/pytest loads a Python program stored at the file store, under folder boxes for user wiselab. | Go to the file store and edit boxes/boxes.py to see the program code. | Edit this scene in the builder, to see the program object stored. | See the ARTS gui to see the runtimes and modules running. | . ",
    "url": "https://arena.conix.io/content/arts/python.html#quick-reference",
    "relUrl": "/content/arts/python.html#quick-reference"
  },"289": {
    "doc": "Program Launch Example",
    "title": "Step by Step Example",
    "content": "How to launch a program (e.g. boxes/boxes.py) in a file store. 1. Edit Scene: https://arenaxr.org/build/ . 2. Make sure the ARENA and MQTT host are https://arenaxr.org/ and arenaxr.org:8083: . (the message indicates it successfully queried the persist db) . 3. Enter a name for your new scene (e.g. pytest) . 4. Add a program. By selecting type “program” in the Add/Edit Object select: . 5. Edit the program attributes. Make sure to assign a unique object ID (use ), and: . | action is “create”, | type is “program” and | name is in the form **/** (e.g. **wiselab/boxes** for a program under folder **boxes** of the home folder for user **wiselab** in the ARENA store) | instantiate indicates if a program instance is started for each viewer (browser) or single instance per scene | filename is the program entry file (e.g. boxes.py) | filetype is either Python or wasm, depending on your program | Add environment variables and arguments as needed by the program (for example, the program might read environment variable SCENE to know its scene, then add an environment variable: SCENE=${scene}, where ${scene} will be replaced by the scene name) | . note . By convention, we pass programs environment variables that indicate the scene, realm and MQTT host. These are reflected in the default values of the form. 6. Finalize by pressing the button. You should see the new program object in the scene object list: . 7. Goto to the folder of the program in the file store and add your files there. These can be wasm programs or Python programs that use the arena.py library. See an example in wiselab/boxes. Authentication . You also need to include a requirements.txt with your .py files providing the authentication version of the ARENA Python library that has at least the line: . arena-py . 8. Open the Scene using at the top of the build page (the link should be something like https://arenaxr.org/[your username]/[scene-name]) . 9. See ARTS GUI: https://arenaxr.org/arts/ . ",
    "url": "https://arena.conix.io/content/arts/python.html#step-by-step-example",
    "relUrl": "/content/arts/python.html#step-by-step-example"
  },"290": {
    "doc": "Program Launch Example",
    "title": "Program Launch Example",
    "content": " ",
    "url": "https://arena.conix.io/content/arts/python.html",
    "relUrl": "/content/arts/python.html"
  },"291": {
    "doc": "Runtime",
    "title": "Runtime",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/arts/runtime.html",
    "relUrl": "/content/arts/runtime.html"
  },"292": {
    "doc": "Scenes",
    "title": "Scenes in ARENA-py",
    "content": "Scenes give ARENA-py programs access to an ARENA scene. It provides an interface to add/update objects, run animations, and many more! . ",
    "url": "https://arena.conix.io/content/python/scenes.html#scenes-in-arena-py",
    "relUrl": "/content/python/scenes.html#scenes-in-arena-py"
  },"293": {
    "doc": "Scenes",
    "title": "Scene Access",
    "content": "To get access to a scene in the ARENA, create a Scene object. Make sure you have proper permissions to access it! . scene = Scene(host=\"arenaxr.org\", scene=\"example\") # scene = Arena(host=\"arenaxr.org\", scene=\"example\") works too . ",
    "url": "https://arena.conix.io/content/python/scenes.html#scene-access",
    "relUrl": "/content/python/scenes.html#scene-access"
  },"294": {
    "doc": "Scenes",
    "title": "Arguments",
    "content": "host: Base ARENA URL. realm: ARENA realm name. scene: ARENA scene name. namespace: ARENA namespace. Default value is ARENA username. debug: If True, print authentication debug information and every published message. Ignore this parameter. network_latency_interval: Interval (in ms) to run network graph latency update. Default value is 10000 (10 secs). Ignore this parameter. ",
    "url": "https://arena.conix.io/content/python/scenes.html#arguments",
    "relUrl": "/content/python/scenes.html#arguments"
  },"295": {
    "doc": "Scenes",
    "title": "Callbacks",
    "content": "See Scene Callbacks. ",
    "url": "https://arena.conix.io/content/python/scenes.html#callbacks",
    "relUrl": "/content/python/scenes.html#callbacks"
  },"296": {
    "doc": "Scenes",
    "title": "Access to Persisted Objects",
    "content": "To get access to Objects in the persist database, you can use get_persisted_obj. @scene.run_once def main(): obj = scene.get_persisted_obj(object_id) print(obj) # obj should be an object in persist with persist=True . You can also just do: . @scene.run_once def main(): obj = scene.all_objects[object_id] print(obj) # obj should be an object in persist with persist=True . ",
    "url": "https://arena.conix.io/content/python/scenes.html#access-to-persisted-objects",
    "relUrl": "/content/python/scenes.html#access-to-persisted-objects"
  },"297": {
    "doc": "Scenes",
    "title": "Scenes",
    "content": " ",
    "url": "https://arena.conix.io/content/python/scenes.html",
    "relUrl": "/content/python/scenes.html"
  },"298": {
    "doc": "ARENA Screenshare",
    "title": "ARENA Screenshare",
    "content": "You can share your screen in the ARENA following the tips below. ",
    "url": "https://arena.conix.io/content/overview/screenshare.html",
    "relUrl": "/content/overview/screenshare.html"
  },"299": {
    "doc": "ARENA Screenshare",
    "title": "Screenshare on Primitive Objects",
    "content": "There are a few hints to help you establish objects to screenshare on. | If you choose the name/ID of an already existing object in a scene, it will set the texture of that existing object to be your screen. | If you choose an object that does not exist in a scene, it will spawn a new screen sharing plane with your chosen object_id. This object is not sent through the MQTT bus but is still created for all clients. | Once you have selected your object name, it will open a new tab that allows you to choose which screen you want to share, and ARENA will automatically place that screen onto the object with an object_id you specified. | You can do whatever you want the object you’re screen sharing on as if it were a normal arena object (change size, shape, attach children, etc). This also applies to the object screenshare; it’s just a standard ARENA object with object_id: screenshare! | When an object is dynamically created with the screen share button, it won’t go away after you stop screen sharing. It will only go away if you refresh the page. | . ",
    "url": "https://arena.conix.io/content/overview/screenshare.html#screenshare-on-primitive-objects",
    "relUrl": "/content/overview/screenshare.html#screenshare-on-primitive-objects"
  },"300": {
    "doc": "ARENA Screenshare",
    "title": "Screenshare Walkthrough",
    "content": ". | Click the More Options icon: | Click the Screenshare icon: | . | You will be asked to confirm if you intend to share your screen to the scene. | . | You can enter multiple screen object_id comma-delimited to share to multiple screens. | For a single screen share, the default screenshare id is typically a good option. | . | Select screens or application sharing. | . warning . Mac OS users: You need to give permissions to Chrome in the System Preferences first. | Click Screen Recording | Check Google Chrome | . | ARENA will open a new tab showing which view is being shared. | Click Exit to end screen sharing. | . | The ARENA scene view will now show your screen mapped across each object_id chosen. | . | Closeup view. | . ",
    "url": "https://arena.conix.io/content/overview/screenshare.html#screenshare-walkthrough",
    "relUrl": "/content/overview/screenshare.html#screenshare-walkthrough"
  },"301": {
    "doc": "ARENA Screenshare",
    "title": "Using Power Point",
    "content": "tip . You can easily share just a screen in power point even in presenter mode. | Slide Show -&gt; Setup Slide Show Options -&gt; Browsed by an individual | Right-click during presentation brings up cursor options | Select Browsed by an individual | Select Slide Show | Select Setup Slide Show | . Single Window Present . | Select Slide Show tab | Select Setup Slide Show | Select Browsed by an individual (window) | . | Right-click for Pointers. | . ",
    "url": "https://arena.conix.io/content/overview/screenshare.html#using-power-point",
    "relUrl": "/content/overview/screenshare.html#using-power-point"
  },"302": {
    "doc": "Security",
    "title": "ARENA Security",
    "content": "The root of trust for ARENA MQTT messages and other resources derives from the ACL permissions stored in the user database applied to an ARENA JWT. ",
    "url": "https://arena.conix.io/content/user-security/security.html#arena-security",
    "relUrl": "/content/user-security/security.html#arena-security"
  },"303": {
    "doc": "Security",
    "title": "Authenticated or Anonymous",
    "content": "The ARENA supports 2 basic modes of access: an Authenticated account to control scenes, and a more restricted Anonymous login to view scenes only. | Web Authenticated: Users can view and edit ARENA scenes, and video conference. | Web Anonymous: Users can only view ARENA scenes, video conference, and additional features are restricted. Users can only update their own avatar 3d object. | CLI Authenticated: Users can run ARENA command line applications to alter the scene interactively. | . ",
    "url": "https://arena.conix.io/content/user-security/security.html#authenticated-or-anonymous",
    "relUrl": "/content/user-security/security.html#authenticated-or-anonymous"
  },"304": {
    "doc": "Security",
    "title": "Authority Flow",
    "content": "The user database is consulted to generate the ARENA JSON Web Token (jwt1), then each client can use the jwt1 to connect to the MQTT broker. The scene persistence database generates its own JWT (jwt2) to subscribe to published messages. This means that the ACL for scenes can only be stored in the user database, since the scene persistence database depends on the token (jwt1) generated by the user database for published messages to succeed. Web and CLI Client Authority Flow . | A user supplies their login credentials on the ARENA web client by visiting the web host in a browser or when launching an ARENA Python application. | Login credentials are checked in the ARENA User database and a ACL-appropriate ARENA JWT (jwt1) is returned. The jwt1 will include a specific list of topics the user is allowed to publish and subscribe to. | (Web only) A Jitsi server connection is established using jwt1 which includes authority for this scene as a meeting room. | Any static graphical object data for the scene is loaded from the object persistence database if the jwt1 permits subscribing to this scene. | A MQTT broker connection is established with a subscription to messages for scene graphical updates, user text chat, and runtime management topics. Now the user can publish MQTT messages to change scene graphics, which is generally only permitted by the scene creator via jwt1. | If MQTT messages for the scene requested to be persistent and not ephemeral in the scene, the persistence database has subscribed to the MQTT broker with an all-scene subscription JWT (jwt2) so it may save those published message payloads. | The user is subscribed via MQTT to all graphical updates to the scene, user text chats, and app updates, creating a synchronized real-time 3d-experience for users. | Optionally, a user may add/delete scenes from the persistence database, requiring the appropriate topic level permission from jwt1. | . ",
    "url": "https://arena.conix.io/content/user-security/security.html#authority-flow",
    "relUrl": "/content/user-security/security.html#authority-flow"
  },"305": {
    "doc": "Security",
    "title": "User IDs",
    "content": "ARENA web visitors are uniquely identified by their camera object-id, which includes their username and a server-issued session-id. As all 3D objects in the ARENA are identified by names, camera IDs have 3 underscore separated components, e.g: camera_1234567890_er1k. The last part is your username, the middle part is a unique ID. To restrict user-spoofing, the user database service assigns a unique session-id at the time the ARENA JWT is issued. Staff users may override the random user ID to test experimental cameras and equipment. You can specify the scene address URL parameter e.g. &amp;fixedCamera=er1k which will ignore the server assigned ID. ",
    "url": "https://arena.conix.io/content/user-security/security.html#user-ids",
    "relUrl": "/content/user-security/security.html#user-ids"
  },"306": {
    "doc": "Security",
    "title": "Scene Permissions",
    "content": "All scenes a have a few default permissions to allow public viewing and private editing. | Public Write: Open permission to subscribe to the entire scene (default: enabled). | Public Read: Open permission to publish to the entire scene (default: disabled). | Allow Anonymous: Open to allow Anonymous login users (default: enabled). | Editors: List of usernames namespace owner has added as editor (default: none). | . ",
    "url": "https://arena.conix.io/content/user-security/security.html#scene-permissions",
    "relUrl": "/content/user-security/security.html#scene-permissions"
  },"307": {
    "doc": "Security",
    "title": "MQTT Permissions List",
    "content": "The list of topics the ARENA JWT permits you to publish and subscribe to can be viewed on those pages which make direct MQTT broker connections. | Scene View: Permissions link on the Settings panel. | Scene Builder: Permissions link on the right navigation menu in the top of the page. | Network Graph: Permissions link on the right navigation menu in the top of the page. | Runtime Visualization: Permissions link on the right navigation menu in the top of the page. | . ",
    "url": "https://arena.conix.io/content/user-security/security.html#mqtt-permissions-list",
    "relUrl": "/content/user-security/security.html#mqtt-permissions-list"
  },"308": {
    "doc": "Security",
    "title": "User database access",
    "content": "User database access is controlled by use of third party Oauth2 from Google at the moment. ",
    "url": "https://arena.conix.io/content/user-security/security.html#user-database-access",
    "relUrl": "/content/user-security/security.html#user-database-access"
  },"309": {
    "doc": "Security",
    "title": "MQTT Broker access",
    "content": "The ARENA JWT is required to connect to the broker and the custom claims of the JWT describe exactly which topics any user can publish or subscribe to. ",
    "url": "https://arena.conix.io/content/user-security/security.html#mqtt-broker-access",
    "relUrl": "/content/user-security/security.html#mqtt-broker-access"
  },"310": {
    "doc": "Security",
    "title": "Jitsi Server access",
    "content": "The ARENA JWT is required to allow any client to publish video conferencing data to our Jitsi servers. The ARENA JWT includes fields denoting the Jitsi room representing the scene. ",
    "url": "https://arena.conix.io/content/user-security/security.html#jitsi-server-access",
    "relUrl": "/content/user-security/security.html#jitsi-server-access"
  },"311": {
    "doc": "Security",
    "title": "Persistence database access",
    "content": "The ARENA JWT is required to save any scene objects or other scene settings. The topic structure which allows permissions for publish to a scene is used to determine if commands to delete a scene should be permitted or denied. It is also used to determine if a user can publish commands to the MQTT bus and in turn anything the persistence database is subscribed to. ",
    "url": "https://arena.conix.io/content/user-security/security.html#persistence-database-access",
    "relUrl": "/content/user-security/security.html#persistence-database-access"
  },"312": {
    "doc": "Security",
    "title": "Security",
    "content": " ",
    "url": "https://arena.conix.io/content/user-security/security.html",
    "relUrl": "/content/user-security/security.html"
  },"313": {
    "doc": "Source and Links",
    "title": "ARENA Source and Links",
    "content": " ",
    "url": "https://arena.conix.io/content/source.html#arena-source-and-links",
    "relUrl": "/content/source.html#arena-source-and-links"
  },"314": {
    "doc": "Source and Links",
    "title": "ARENA Usage Links",
    "content": "Our demonstration sample server runs at https://arenaxr.org . | ARENA Default Scene | ARENA Scene Builder | ARENA Network Graph | ARENA Runtime Supervisor - ARTS | ARENA File Store | ARENA Scene Locator - ATLAS | . ",
    "url": "https://arena.conix.io/content/source.html#arena-usage-links",
    "relUrl": "/content/source.html#arena-usage-links"
  },"315": {
    "doc": "Source and Links",
    "title": "ARENA Sources",
    "content": ". | Documentation | Deployment Docker | Browser client (ARENA-core) | Python Library | ATLAS | Persistence Database | Authentication Backend | Runtime Manager | File Store | Mosquitto Broker | Posefusion | AprilTag Decoding for AR.js | AprilTag WASM Detector | AprilTag 36h11 Generator | . ",
    "url": "https://arena.conix.io/content/source.html#arena-sources",
    "relUrl": "/content/source.html#arena-sources"
  },"316": {
    "doc": "Source and Links",
    "title": "Design Doc (WIP)",
    "content": ". | ARENA Refactor Design | . ",
    "url": "https://arena.conix.io/content/source.html#design-doc-wip",
    "relUrl": "/content/source.html#design-doc-wip"
  },"317": {
    "doc": "Source and Links",
    "title": "Source and Links",
    "content": " ",
    "url": "https://arena.conix.io/content/source.html",
    "relUrl": "/content/source.html"
  },"318": {
    "doc": "Tasks",
    "title": "Tasks in ARENA-py",
    "content": "Tasks are ways you can run programs in the ARENA. You can think of tasks like threads. In fact, they behave a bit like Python threads, but unlike threads, ARENA-py tasks are all run in a single event loop. ",
    "url": "https://arena.conix.io/content/python/tasks.html#tasks-in-arena-py",
    "relUrl": "/content/python/tasks.html#tasks-in-arena-py"
  },"319": {
    "doc": "Tasks",
    "title": "Run Tasks/Start Event Loop",
    "content": "scene.run_tasks() . ",
    "url": "https://arena.conix.io/content/python/tasks.html#run-tasksstart-event-loop",
    "relUrl": "/content/python/tasks.html#run-tasksstart-event-loop"
  },"320": {
    "doc": "Tasks",
    "title": "Stop Running Tasks/Stop Event Loop",
    "content": "scene.stop_tasks() . ",
    "url": "https://arena.conix.io/content/python/tasks.html#stop-running-tasksstop-event-loop",
    "relUrl": "/content/python/tasks.html#stop-running-tasksstop-event-loop"
  },"321": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": "You can run a task once at startup: . @scene.run_once def f(): print(\"here on startup\") # or do this: scene.run_once(f) . You can run a task after a specified period of time (after [interval_ms] milliseconds): . @scene.run_after_interval(interval_ms=1000) def f(): print(\"here, but after 1 second\") # or do this: scene.run_after_interval(f, 1000) . You can run a task every [interval_ms] milliseconds: . @scene.run_forever(interval_ms=10000) def f(): print(\"here, but after 10 seconds\") # or do this: scene.run_forever(f, 10000) . You can run an async task (for advanced users who want to use asyncio to have more control over what their tasks are doing): . @scene.run_async def f(): print(\"here\") await scene.sleep(5000) # must use scene.sleep or asyncio.sleep. DO NOT use time.sleep! print(\"here, but after 5 seconds\") # or do this: scene.run_async(f, 1000) . ",
    "url": "https://arena.conix.io/content/python/tasks.html",
    "relUrl": "/content/python/tasks.html"
  },"322": {
    "doc": "Tasks",
    "title": "Sharing global variables",
    "content": "Like with threads, global variables in ARENA-py must be used with the “global” keyword. Note: If global variables are pointing to something allocated in memory (like a class or list), “global” may not be needed, but it’s always best to use “global” just to be safe. x = 0 @scene.run_once def main(): global x # note the use of \"global\" x += 1 print(x) @scene.run_after_interval(interval_ms=1000) def hello(): global x # note the use of \"global\" x += 1 print(x) # below might not work as intended @scene.run_after_interval(interval_ms=2000) def hello1(): # note the lack of \"global\" x += 1 print(x) . ",
    "url": "https://arena.conix.io/content/python/tasks.html#sharing-global-variables",
    "relUrl": "/content/python/tasks.html#sharing-global-variables"
  },"323": {
    "doc": "Tasks",
    "title": "Arguments",
    "content": "You can add arguments to tasks like so: . @scene.run_once(text=\"arena-py 2.0!\", parent=\"sphere\") def make_text(text, parent): text_obj = Text(text=text, position=(0,1.5,0), parent=parent) scene.add_object(text_obj) # scene.run_once(make_text, text=\"arena-py 2.0!\", parent=\"sphere\") # also works . objs = [] @scene.run_forever(interval_ms=1234, objs=objs) def forever(objs): for o in objs: print(o) # scene.run_forever(forever, 1234, objs=objs) # also works . ",
    "url": "https://arena.conix.io/content/python/tasks.html#arguments",
    "relUrl": "/content/python/tasks.html#arguments"
  },"324": {
    "doc": "Three.js",
    "title": "Three.js",
    "content": ". | https://threejs.org/ | . Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/developer/threejs.html",
    "relUrl": "/content/developer/threejs.html"
  },"325": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "Here are some common situations which can help when programming and collaborating in the ARENA. ",
    "url": "https://arena.conix.io/content/troubleshooting.html",
    "relUrl": "/content/troubleshooting.html"
  },"326": {
    "doc": "Troubleshooting",
    "title": "Can you see me? Can you hear me?",
    "content": ". | Audio/video setups vary a lot between web browsers so this can be common. | Don’t forget to make sure your computer speakers are not Muted or have your Volume set too low. | For Chrome, test your permissions and try different cameras/microphones: chrome://settings/content/camera and chrome://settings/content/microphone. | For Edge, in Windows Start &gt; Settings &gt; Privacy &gt; Camera, and toggle the switch. Try the Microphone setting here as well. | For Firefox, test your permissions about:preferences#privacy, scroll down to Permissions, then Camera/Microphone and try different cameras/microphones: | For Safari, navigate your menus to Menu &gt; Safari &gt; Preferences… &gt; Websites &gt; Camera/Microphones and try different cameras/microphones. | Since we use WebRTC, try your browser at a third-party WebRTC test site https://test.webrtc.org/. | . ",
    "url": "https://arena.conix.io/content/troubleshooting.html#can-you-see-me-can-you-hear-me",
    "relUrl": "/content/troubleshooting.html#can-you-see-me-can-you-hear-me"
  },"327": {
    "doc": "Troubleshooting",
    "title": "Where is my Object?",
    "content": ". | Is the object’s position below the ground? The “y” position will negative below the default visible floor. | Is the object’s scale too big/small? Models especially have wild differences in scale, try increasing/decreasing the order of magnitude of the scale. Try scale of 10, 1, 0.1, or 0.01. | Does the scene name in the URL match the scene name/topic where the object was created? e.g. URL is https://arenaxr.org/[your username]/example and MQTT topic published to is realm/s/[your username]/example/some_object_1. | Does the object appear in the left column of the A-Frame Scene Inspector? | . ",
    "url": "https://arena.conix.io/content/troubleshooting.html#where-is-my-object",
    "relUrl": "/content/troubleshooting.html#where-is-my-object"
  },"328": {
    "doc": "Troubleshooting",
    "title": "I have different problem, where can I get help?",
    "content": "We have a place for submitting issues and asking questions in most of our code repositories: . | ARENA Docs issues | ARENA Website/Webserver issues | ARENA Python issues | ATLAS Scene Locator issues | ARENA Persistence issues | ARENA Authentication issues | ARENA Deployment Docker issues | . ",
    "url": "https://arena.conix.io/content/troubleshooting.html#i-have-different-problem-where-can-i-get-help",
    "relUrl": "/content/troubleshooting.html#i-have-different-problem-where-can-i-get-help"
  },"329": {
    "doc": "Exporting from Unity",
    "title": "Exporting from Unity",
    "content": "There are some limitations and things to keep in mind when exporting from Unity. | In order to optimize load times, reduce file sizes and increase frame rates, all meshes with same material should be combined into single mesh. | Meshes should be compressed by reducing floating point accuracy and decimating mesh polygon count. | Textures should be also be combined to single atlased “large” compressed textures as opposed to multiple single texture in either PNG or JPG. This reduces load time significantly and reduces the change of material application error in ARENA. | Normal maps are supported; however other more complex shaders are not supported. | Unity Lightmaps are not supported. It is possible to bake approximate lightmaps directly onto diffuse textures to create “fake” shadows. | Unity real time lights do not appear to be exported. Real time lights should be recreated in ARENA. | It is possible to export transparent materials. | It is possible to export animated models from Unity. Animated models in Unity should be set to “Legacy” mode with compressed keyframes. All animations must be contained and combined within the same model for animation export to work. Separated animation and model files do not work (Unity FBX convention is to separate mesh from animation files, so significant animation+mesh reprocessing may be required for proper animation export to GLTF.) | . ",
    "url": "https://arena.conix.io/content/3d-content/unity.html",
    "relUrl": "/content/3d-content/unity.html"
  },"330": {
    "doc": "User Account",
    "title": "ARENA User Account Options",
    "content": "Authenticated users of the ARENA have a user account with which they can alter public access to any scenes they may create. ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#arena-user-account-options",
    "relUrl": "/content/user-security/user-account.html#arena-user-account-options"
  },"331": {
    "doc": "User Account",
    "title": "User Profile",
    "content": "Each authenticated user has a profile page to manage their user account options. Your profile page will show you a list of scenes that you have rights to edit. ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#user-profile",
    "relUrl": "/content/user-security/user-account.html#user-profile"
  },"332": {
    "doc": "User Account",
    "title": "User Roles",
    "content": "The first time a user is authenticated in the ARENA they have the User role by default. The Staff role may be applied by another Admin user. | Admin: Admin user, local username/password authenticated | Staff: Elevated/Admin Oauth authenticated user | User: Regular Oauth authenticated user | Anonymous: Unauthenticated user | . ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#user-roles",
    "relUrl": "/content/user-security/user-account.html#user-roles"
  },"333": {
    "doc": "User Account",
    "title": "Scene Permissions",
    "content": "Each scene has some options to manage permissions and access to the scene. Each scene you create will be published under your user namespace with the following rights by default. | Public Read: enabled | Public Write: disabled | Allow Anonymous: enabled | Editors: none | . Public Read . Disabling public read will prevent all other users from viewing your scene: except those who have the Admin or Staff roles. Public Write . This is disabled by default, preventing all other users from altering your scene: except those who have the Admin or Staff roles, and those users you whitelist as Editor in the scene. Warning . Enabling this denotes that all users may write to the scene and create, change, or delete content. Allow Anonymous . Disabling this will cause any Anonymous visitor to your scene to be denied access to view the scene or share the video conferencing features, allowing only authenticated users access to those resources. Editors . You can use this setting to add or remove other users you may whitelist who can create or alter elements of your scene. ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#scene-permissions",
    "relUrl": "/content/user-security/user-account.html#scene-permissions"
  },"334": {
    "doc": "User Account",
    "title": "Public Scenes",
    "content": "By default, scenes published under the public namespace are always considered Public Read in the ARENA. ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#public-scenes",
    "relUrl": "/content/user-security/user-account.html#public-scenes"
  },"335": {
    "doc": "User Account",
    "title": "ACL Default For New Users",
    "content": "We want all users to have the ability to view and move in scenes easily. For this, we use a default Viewer-Closed model: . | A user gets read access to all. | A user gets write access to personal objects (camera, hand controllers, avatar) only. | A user must apply for write access for other scene objects through the ACL website, awaiting scene owner’s permission. | . ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#acl-default-for-new-users",
    "relUrl": "/content/user-security/user-account.html#acl-default-for-new-users"
  },"336": {
    "doc": "User Account",
    "title": "Administrator Functions",
    "content": "Admin users have an additional function on their profile page. There is a Staff Users list which will be empty when the ARENA is first deployed. Here an Admin can set which authenticated users have the Staff user role. ",
    "url": "https://arena.conix.io/content/user-security/user-account.html#administrator-functions",
    "relUrl": "/content/user-security/user-account.html#administrator-functions"
  },"337": {
    "doc": "User Account",
    "title": "User Account",
    "content": " ",
    "url": "https://arena.conix.io/content/user-security/user-account.html",
    "relUrl": "/content/user-security/user-account.html"
  },"338": {
    "doc": "First Time in the ARENA",
    "title": "Entering ARENA for the First Time",
    "content": "This walkthrough of the ARENA interface will show the main features of the ARENA when used in Virtual Reality (VR). ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#entering-arena-for-the-first-time",
    "relUrl": "/content/overview/user-guide.html#entering-arena-for-the-first-time"
  },"339": {
    "doc": "First Time in the ARENA",
    "title": "Before you Start",
    "content": "For the best ARENA performance, you need a couple of things: . | Chrome or Edge Web Browser (FireFox also works, but sometimes FireFox doesn’t send video) | No ad blockers (some blockers are okay, others cause issues) | Headphones highly recommended. They provide directional sound and stop echo. Please stay on mute when not speaking if you don’t have headphones. | A fast machine to handle all the processing and 3D graphics is also recommended | . ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#before-you-start",
    "relUrl": "/content/overview/user-guide.html#before-you-start"
  },"340": {
    "doc": "First Time in the ARENA",
    "title": "Opening a Scene",
    "content": "Let us have a look at the lobby scene: https://arenaxr.org/public/lobby. The link above will open in a new tab. Since ARENA is a collaborative, multi-user environment, you may see other people there. Say Hi! . note . ARENA uses the concept of scenes to separate content. In a Virtual Reality (VR) environment, you can imagine each scene as a separate room. See the ARENA Overview to learn more. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#opening-a-scene",
    "relUrl": "/content/overview/user-guide.html#opening-a-scene"
  },"341": {
    "doc": "First Time in the ARENA",
    "title": "Signing In",
    "content": "When you first enter the ARENA, there will be a screen asking you to sign in. You can use your Google account, which will automatically set your name to the name used in your Google account (you can change this later). tip . You can also choose to sign in anonymously; you’ll have to enter a name to use in the ARENA. ARENA Username . If you choose to login using your Google account, you will be asked to signup and define your arena username: . This will create a namespace under which you can have your own scenes. For example, user1, will have his scenes under http://arenaxr.org/user1/. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#signing-in",
    "relUrl": "/content/overview/user-guide.html#signing-in"
  },"342": {
    "doc": "First Time in the ARENA",
    "title": "Permissions",
    "content": "You’ll be asked to give location, microphone, and camera access to the ARENA site. If you do not select “yes”, you won’t be able to connect to the scene location ATLAS, use voice, video, or the face tracking avatar. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#permissions",
    "relUrl": "/content/overview/user-guide.html#permissions"
  },"343": {
    "doc": "First Time in the ARENA",
    "title": "Moving Around",
    "content": "Once inside the ARENA, you should see the lobby scene. You might have to wait for all the scene to load until it looks something like this: . To move, use the arrow keys. More advanced movement can be done by a combination of ‘W’, ‘A’, ‘S’, ‘D’ (to go forward/back and stride) and the mouse (to look around/change direction). You can also mix and match any combination of these motions. Definitely try clicking and dragging with the mouse. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#moving-around",
    "relUrl": "/content/overview/user-guide.html#moving-around"
  },"344": {
    "doc": "First Time in the ARENA",
    "title": "Buttons",
    "content": "The buttons around the screen give access to several options, such as: your sound and video settings, you display name, chat, or find other people and places. Note that everyone starts with audio and video off. | Button | Action | Description | . | | Settings | Expand/Collapse settings along the right. | . | | Microphone | Speak into the ARENA, or remain silent. | . | | Camera | Let your camera show you as a moving box with your camera image on it. | . | | Facial Avatar | Let your camera recognize your facial features, and you will appear an animated head matching your facial movement. | . | | Flight | Movement defaults to walking along the ground, this will enable you to fly up or even down through the ground. | . | | Movement Speed | Slow/Medium/Fast, defaults to Medium. | . | | Screenshare | Share your screen as a large panel in the ARENA. | . | | Chat Messages | Open chat messaging. | . | | User List | Open list of present users. | . | | Sign Out | Exit the ARENA. | . ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#buttons",
    "relUrl": "/content/overview/user-guide.html#buttons"
  },"345": {
    "doc": "First Time in the ARENA",
    "title": "Audio/Video Capabilities",
    "content": "The ARENA experience includes audio and video capabilities. Users can share their video and see other users as floating cubes. One interesting feature is that sound is spatial in the ARENA (will fade as users get further away and comes from the direction where the user is). ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#audiovideo-capabilities",
    "relUrl": "/content/overview/user-guide.html#audiovideo-capabilities"
  },"346": {
    "doc": "First Time in the ARENA",
    "title": "Chat, Find People and Places",
    "content": "You can send messages to other users, find users (and place yourself in front of them) and find places, such as meeting points and posters (and place yourself in front of them), using the buttons at the bottom of the screen. note . The landmarks button only appears in scenes that have landmarks. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#chat-find-people-and-places",
    "relUrl": "/content/overview/user-guide.html#chat-find-people-and-places"
  },"347": {
    "doc": "First Time in the ARENA",
    "title": "Additional Settings",
    "content": "The settings menu is collapsed by default; clicking the arrow underneath the face tracking icon will expand the menu. When clicked, you will see additional icons, your name and authentication options in a pop up next to the icons. It shows the authenticator (Google or anonymous), the email used for Google authentication, and your display name. The display name can be changed here. It is initially set to the name from your Google account or the name chosen when signing in anonymously. If you click the X on the settings box and it disappears, you will need to collapse and re-open the icons to show the options again. ",
    "url": "https://arena.conix.io/content/overview/user-guide.html#additional-settings",
    "relUrl": "/content/overview/user-guide.html#additional-settings"
  },"348": {
    "doc": "First Time in the ARENA",
    "title": "First Time in the ARENA",
    "content": " ",
    "url": "https://arena.conix.io/content/overview/user-guide.html",
    "relUrl": "/content/overview/user-guide.html"
  },"349": {
    "doc": "User Presence",
    "title": "ARENA User Presence",
    "content": "Users in the ARENA are represented to each other in a 3d scene with an avatar. Your default user avatar looks like a static 3d floating head model with your chosen display name above the head, and a muted microphone icon. Wherever you choose to move or look within a scene is where other users will see your avatar move or look. ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#arena-user-presence",
    "relUrl": "/content/user-security/user-presence.html#arena-user-presence"
  },"350": {
    "doc": "User Presence",
    "title": "Audio/Video Setup",
    "content": "Upon entering a scene you will see a panel for audio and video setup. Here you can Select Camera, Speakers, or Microphone to use, test your devices to make sure they are working, and adjust your display name. tip . If you are having trouble, the Test Browser button is a good place to find out if your hardware is compatible with the WebRTC protocol we use for video conferencing. ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#audiovideo-setup",
    "relUrl": "/content/user-security/user-presence.html#audiovideo-setup"
  },"351": {
    "doc": "User Presence",
    "title": "User Display Name",
    "content": "The display name you choose, will be displayed in random colored text above your user avatar. In an ARENA Scene, you can change your display text by clicking the last right-hand arrow “V” icon to show the Settings panel, which provides a Display Name input box you can change to what you wish. ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#user-display-name",
    "relUrl": "/content/user-security/user-presence.html#user-display-name"
  },"352": {
    "doc": "User Presence",
    "title": "User Video",
    "content": "If you click the camera icon, you will begin to send video to other users. The video you are sending to other users will appear in the upper left corner of the screen. If your scene is enabled to use the facial recognition feature, you can click the recognition avatar icon and you will see the facial feature points recognized in the upper left corner of your screen. | User Avatar | Image | Camera | Video Sent | . | Static 3d head (default) | TBD | Off | None | . | Facial recognition 3d head | TBD | On | No video, only facial feature points | . | Video cube | TBD | On | Camera video | . | Black cube | TBD | On | Camera video error, only black frames | . Warning . Camera input is not available on all mobile device/browser combinations. ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#user-video",
    "relUrl": "/content/user-security/user-presence.html#user-video"
  },"353": {
    "doc": "User Presence",
    "title": "User Audio",
    "content": "If you click the microphone icon, you will begin to send audio to other users. When you have your microphone turned off, other users will see a muted microphone icon over your avatar. Our audio support includes a number of features. Depending on the range between you and other users’ avatars, you may experience louder sounds the closer you are to them, depending which side of you they are speaking from, and if they are far enough away from you to cutoff the audio completely. | User Audio | User Range | Microphone | Audio Sent | . | Muted Head Icon | all | Off | None | . | Directional Audio | 0-20m | On | Audio is in stereo by avatar pose | . | Spatial Audio | 0-20m | On | Audio fades with distance | . | Cutoff Audio | &gt; 20m | On | None | . ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#user-audio",
    "relUrl": "/content/user-security/user-presence.html#user-audio"
  },"354": {
    "doc": "User Presence",
    "title": "User Pose",
    "content": "By default the ARENA shows your location as a 3d model of a head, with your nose at your position coordinates. The pose of a user is comprised of the user’s position (location) and rotation (gaze) in the 3d world of the ARENA. Depending on the XR view and hardware you use, your pose may be determined by a number of differing sensors. | XR View | Rotation Sensor | Position Sensor | . | VR Desktop | Keyboard/Mouse | Keyboard | . | VR Phone/Tablet | Touchscreen | Touchscreen | . | VR Headset/Glasses (VR button) | Accelerometer | ——— | . | AR Phone/Tablet (AR button) | Accelerometer | Accelerometer/Camera | . ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#user-pose",
    "relUrl": "/content/user-security/user-presence.html#user-pose"
  },"355": {
    "doc": "User Presence",
    "title": "Facial Recognition Avatar",
    "content": "Your ARENA scene may have the capability to use facial recognition to recognize your facial feature points from your camera and present a generic 3d head which will move its eyes, eyebrows, mouth and lips as you do. Only other users will see the 3d rendering of your avatar. ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#facial-recognition-avatar",
    "relUrl": "/content/user-security/user-presence.html#facial-recognition-avatar"
  },"356": {
    "doc": "User Presence",
    "title": "Screen Sharing",
    "content": "When you click and accept the screenshare icon and popup, it will ask for the object name/ID of the object you want to screen share on (defaulted to an object with object_id: screenshare, which is dynamically created if it doesn’t exist already). | See our Screenshare Walkthrough for more detail. | . ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#screen-sharing",
    "relUrl": "/content/user-security/user-presence.html#screen-sharing"
  },"357": {
    "doc": "User Presence",
    "title": "Vive (laser) controls",
    "content": "Out of Date . We have some support for VR Vive hand controls in the ARENA, but these instructions may be out of date. We’ve noticed the controllers don’t show up in the scene unless they both and EVERYTHING else for SteamVR are all working (headset, lighthouses). And sometimes you have to restart SteamVR for hand controllers to show up in the scene; even though SteamVR shows them as being working/on/available/etc. It’s possible to open VR mode in an ARENA scene and be missing the hand controls. By default we use A-Frame laser-controls which default to showing Valve Index controller 3D models (gray, circular), even if we are using (equivalent) Vive controllers (black, paddle shaped, not included in the list of controllers known to A-Frame). ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#vive-laser-controls",
    "relUrl": "/content/user-security/user-presence.html#vive-laser-controls"
  },"358": {
    "doc": "User Presence",
    "title": "Camera Perspective",
    "content": "(from A-Frame documentation) . | The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera. | . | A camera should usually be positioned at the average height of human eye level (1.6 meters). When used with controls that receive rotation or position (e.g. from a VR device) this position will be overridden. | . &lt;a-entity camera look-controls position=\"0 1.6 0\"&gt;&lt;/a-entity&gt; . The above example puts the camera at a position in the scene, but sure enough, when we use a tablet with WebXRViewer or a VR or AR headset, these values are overwritten. In fact, it turns out that from a desktop browser, at the start of our A-Frame session, regardless of the values set in the HTML above, the start position is set to (0, 1.6, 0). It was misleading that the HTML definition just happened to match. Our code sets it to (0,0,0) in the declaration. It gets more interesting: on a tablet or phone, the start position again gets overridden by (0,0,0) this time! . | When moving or rotating the camera relative to the scene, use a camera rig. By doing so, the camera’s height offset can be updated by room-scale devices, while still allowing the tracked area to be moved independently around the scene. | . &lt;a-entity id=\"rig\" position=\"25 10 0\"&gt; &lt;a-entity id=\"camera\" camera look-controls&gt;&lt;/a-entity&gt; &lt;/a-entity&gt; . ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html#camera-perspective",
    "relUrl": "/content/user-security/user-presence.html#camera-perspective"
  },"359": {
    "doc": "User Presence",
    "title": "User Presence",
    "content": " ",
    "url": "https://arena.conix.io/content/user-security/user-presence.html",
    "relUrl": "/content/user-security/user-presence.html"
  },"360": {
    "doc": "UWB",
    "title": "UWB",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://arena.conix.io/content/localization/uwb.html",
    "relUrl": "/content/localization/uwb.html"
  }
}
